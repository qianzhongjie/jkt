// <autogenerated>
//   This file was generated by T4 code generator ServicesCodeScript.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using OSharp.Core;
using OSharp.Core.Data;
using OSharp.Utility;
using OSharp.Utility.Data;
using OSharp.Utility.Extensions;
using System.Linq.Expressions;
using System.Threading.Tasks;

using Bode.Services.Core.Contracts;
using Bode.Services.Core.Dtos.Student;
using Bode.Services.Core.Models.Student;

namespace Bode.Services.Implement.Services
{
	public partial class StudentService : IStudentContract
	{
		                #region City信息业务

                public IRepository<City, int> CityRepo { protected get; set; }

                public IQueryable<City> Citys
                {
                    get { return CityRepo.Entities.Where(p => !p.IsDeleted); }
                }

                /// <summary>
                /// 保存City信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的CityDto信息</param>
                /// <returns>业务操作集合</returns>
                public async Task<OperationResult> SaveCitys(bool updateForeignKey=false,params CityDto[] dtos)
                {
                    try
                    {
                        dtos.CheckNotNull("dtos");
                        var addDtos = dtos.Where(p => p.Id == 0).ToArray();
                        var updateDtos = dtos.Where(p => p.Id != 0).ToArray();

                        CityRepo.UnitOfWork.TransactionEnabled = true;

                        Action<CityDto> checkAction=null;
                        Func<CityDto, City, City> updateFunc=null;
                        if (addDtos.Length > 0)
                        {
                            CityRepo.Insert(addDtos,checkAction,updateFunc);
                        }
                        if (updateDtos.Length > 0)
                        {
                            CityRepo.Update(updateDtos,checkAction,updateFunc);
                        }
                        await CityRepo.UnitOfWork.SaveChangesAsync();
                        return new OperationResult(OperationResultType.Success, "保存成功");
                    }
                    catch(Exception e)
                    {
                        return new OperationResult(OperationResultType.Error, e.Message);
                    }
                }

                /// <summary>
                /// 删除City信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                public async Task<OperationResult> DeleteCitys(params int[] ids)
                {
                    ids.CheckNotNull("ids");
                    await CityRepo.RecycleAsync(p=>ids.Contains(p.Id));
                    return new OperationResult(OperationResultType.Success, "删除成功");
                }

                #endregion

                                #region JCU信息业务

                public IRepository<JCU, int> JCURepo { protected get; set; }

                public IQueryable<JCU> JCUs
                {
                    get { return JCURepo.Entities.Where(p => !p.IsDeleted); }
                }

                /// <summary>
                /// 保存JCU信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的JCUDto信息</param>
                /// <returns>业务操作集合</returns>
                public async Task<OperationResult> SaveJCUs(bool updateForeignKey=false,params JCUDto[] dtos)
                {
                    try
                    {
                        dtos.CheckNotNull("dtos");
                        var addDtos = dtos.Where(p => p.Id == 0).ToArray();
                        var updateDtos = dtos.Where(p => p.Id != 0).ToArray();

                        JCURepo.UnitOfWork.TransactionEnabled = true;

                        Action<JCUDto> checkAction=null;
                        Func<JCUDto, JCU, JCU> updateFunc=(dto, entity) => 
                        {
                            if(dto.Id==0||updateForeignKey)
                            {
                                                                        entity.City = CityRepo.GetByKey(dto.CityId);
                                                                    }
                            return entity; 
                        };
                        if (addDtos.Length > 0)
                        {
                            JCURepo.Insert(addDtos,checkAction,updateFunc);
                        }
                        if (updateDtos.Length > 0)
                        {
                            JCURepo.Update(updateDtos,checkAction,updateFunc);
                        }
                        await JCURepo.UnitOfWork.SaveChangesAsync();
                        return new OperationResult(OperationResultType.Success, "保存成功");
                    }
                    catch(Exception e)
                    {
                        return new OperationResult(OperationResultType.Error, e.Message);
                    }
                }

                /// <summary>
                /// 删除JCU信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                public async Task<OperationResult> DeleteJCUs(params int[] ids)
                {
                    ids.CheckNotNull("ids");
                    await JCURepo.RecycleAsync(p=>ids.Contains(p.Id));
                    return new OperationResult(OperationResultType.Success, "删除成功");
                }

                #endregion

                                #region JcuSystem信息业务

                public IRepository<JcuSystem, int> JcuSystemRepo { protected get; set; }

                public IQueryable<JcuSystem> JcuSystems
                {
                    get { return JcuSystemRepo.Entities.Where(p => !p.IsDeleted); }
                }

                /// <summary>
                /// 保存JcuSystem信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的JcuSystemDto信息</param>
                /// <returns>业务操作集合</returns>
                public async Task<OperationResult> SaveJcuSystems(bool updateForeignKey=false,params JcuSystemDto[] dtos)
                {
                    try
                    {
                        dtos.CheckNotNull("dtos");
                        var addDtos = dtos.Where(p => p.Id == 0).ToArray();
                        var updateDtos = dtos.Where(p => p.Id != 0).ToArray();

                        JcuSystemRepo.UnitOfWork.TransactionEnabled = true;

                        Action<JcuSystemDto> checkAction=null;
                        Func<JcuSystemDto, JcuSystem, JcuSystem> updateFunc=(dto, entity) => 
                        {
                            if(dto.Id==0||updateForeignKey)
                            {
                                                                        entity.SystemInfo = UserInfoRepo.GetByKey(dto.SystemInfoId);
                                                                                entity.Jcus = JCURepo.GetByKey(dto.JcusId);
                                                                    }
                            return entity; 
                        };
                        if (addDtos.Length > 0)
                        {
                            JcuSystemRepo.Insert(addDtos,checkAction,updateFunc);
                        }
                        if (updateDtos.Length > 0)
                        {
                            JcuSystemRepo.Update(updateDtos,checkAction,updateFunc);
                        }
                        await JcuSystemRepo.UnitOfWork.SaveChangesAsync();
                        return new OperationResult(OperationResultType.Success, "保存成功");
                    }
                    catch(Exception e)
                    {
                        return new OperationResult(OperationResultType.Error, e.Message);
                    }
                }

                /// <summary>
                /// 删除JcuSystem信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                public async Task<OperationResult> DeleteJcuSystems(params int[] ids)
                {
                    ids.CheckNotNull("ids");
                    await JcuSystemRepo.RecycleAsync(p=>ids.Contains(p.Id));
                    return new OperationResult(OperationResultType.Success, "删除成功");
                }

                #endregion

                                #region StudentInfo信息业务

                public IRepository<StudentInfo, int> StudentInfoRepo { protected get; set; }

                public IQueryable<StudentInfo> StudentInfos
                {
                    get { return StudentInfoRepo.Entities.Where(p => !p.IsDeleted); }
                }

                /// <summary>
                /// 保存StudentInfo信息(新增/更新)
                /// </summary>
                /// <param name="updateForeignKey">更新时是否更新外键信息</param>
                /// <param name="dtos">要保存的StudentInfoDto信息</param>
                /// <returns>业务操作集合</returns>
                public async Task<OperationResult> SaveStudentInfos(bool updateForeignKey=false,params StudentInfoDto[] dtos)
                {
                    try
                    {
                        dtos.CheckNotNull("dtos");
                        var addDtos = dtos.Where(p => p.Id == 0).ToArray();
                        var updateDtos = dtos.Where(p => p.Id != 0).ToArray();

                        StudentInfoRepo.UnitOfWork.TransactionEnabled = true;

                        Action<StudentInfoDto> checkAction=null;
                        Func<StudentInfoDto, StudentInfo, StudentInfo> updateFunc=(dto, entity) => 
                        {
                            if(dto.Id==0||updateForeignKey)
                            {
                                                                        entity.UserInfo = UserInfoRepo.GetByKey(dto.UserInfoId);
                                                                                entity.Jcu = JCURepo.GetByKey(dto.JcuId);
                                                                                entity.JcuSystem = JcuSystemRepo.GetByKey(dto.JcuSystemId);
                                                                    }
                            return entity; 
                        };
                        if (addDtos.Length > 0)
                        {
                            StudentInfoRepo.Insert(addDtos,checkAction,updateFunc);
                        }
                        if (updateDtos.Length > 0)
                        {
                            StudentInfoRepo.Update(updateDtos,checkAction,updateFunc);
                        }
                        await StudentInfoRepo.UnitOfWork.SaveChangesAsync();
                        return new OperationResult(OperationResultType.Success, "保存成功");
                    }
                    catch(Exception e)
                    {
                        return new OperationResult(OperationResultType.Error, e.Message);
                    }
                }

                /// <summary>
                /// 删除StudentInfo信息
                /// </summary>
                /// <param name="ids">要删除的Id编号</param>
                /// <returns>业务操作结果</returns>
                public async Task<OperationResult> DeleteStudentInfos(params int[] ids)
                {
                    ids.CheckNotNull("ids");
                    await StudentInfoRepo.RecycleAsync(p=>ids.Contains(p.Id));
                    return new OperationResult(OperationResultType.Success, "删除成功");
                }

                #endregion

                	}
}
