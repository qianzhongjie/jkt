<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OSharp.Utility</name>
    </assembly>
    <members>
        <member name="T:OSharp.Utility.Collections.ComparisonHelper`1">
            <summary>
            比较器辅助类，用于快速创建<see cref="T:System.Collections.Generic.IComparer`1"/>接口的实例
            </summary>
            <example>
            var comparer1 = Comparison[Person].CreateComparer(p => p.ID); var comparer2 = Comparison[Person].CreateComparer(p => p.Name); var comparer3 = Comparison[Person].CreateComparer(p => p.Birthday.Year)
            </example>
            <typeparam name="T">要比较的类型</typeparam>
        </member>
        <member name="M:OSharp.Utility.Collections.ComparisonHelper`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>的实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Collections.ComparisonHelper`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>与结果二次比较器<paramref name="comparer"/>的实例
            </summary>
        </member>
        <member name="T:OSharp.Utility.Collections.EqualityHelper`1">
            <summary>
            相等比较辅助类，用于快速创建<see cref="T:System.Collections.Generic.IEqualityComparer`1"/>的实例
            </summary>
            <example>
            var equalityComparer1 = EqualityHelper{Person}.CreateComparer(p => p.ID);
            var equalityComparer2 = EqualityHelper[Person].CreateComparer(p => p.Name);
            var equalityComparer3 = EqualityHelper[Person].CreateComparer(p => p.Birthday.Year);
            </example>
            <typeparam name="T"> </typeparam>
        </member>
        <member name="M:OSharp.Utility.Collections.EqualityHelper`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>的实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Collections.EqualityHelper`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>与结果二次比较器<paramref name="comparer"/>的实例
            </summary>
        </member>
        <member name="T:OSharp.Utility.DataAnnotations.PasswordAttribute">
            <summary>
            确认一个密码数据类型
            </summary>
        </member>
        <member name="M:OSharp.Utility.DataAnnotations.PasswordAttribute.#ctor">
            <summary>
            以最小长度为6、需要数字、不允许纯数字、需要小写字母、不需要大写字母 初始化 <see cref="T:System.ComponentModel.DataAnnotations.PasswordAttribute"/> 类的新实例。
            </summary>
        </member>
        <member name="P:OSharp.Utility.DataAnnotations.PasswordAttribute.RequiredLength">
            <summary>
            获取或设置 密码最小长度
            </summary>
        </member>
        <member name="P:OSharp.Utility.DataAnnotations.PasswordAttribute.RequiredDigit">
            <summary>
            获取或设置 需要数字
            </summary>
        </member>
        <member name="P:OSharp.Utility.DataAnnotations.PasswordAttribute.CanOnlyDigit">
            <summary>
            获取或设置 是否允许纯数字
            </summary>
        </member>
        <member name="P:OSharp.Utility.DataAnnotations.PasswordAttribute.RequiredLowercase">
            <summary>
            获取或设置 需要小字字母
            </summary>
        </member>
        <member name="P:OSharp.Utility.DataAnnotations.PasswordAttribute.RequiredUppercase">
            <summary>
            获取或设置 需要大小字母
            </summary>
        </member>
        <member name="M:OSharp.Utility.DataAnnotations.PasswordAttribute.IsValid(System.Object)">
            <summary>
            检查数据字段的值是否有效。
            </summary>
            <returns>
            如果指定的值有效或 null，则为 true；否则，为 false。
            </returns>
            <param name="value">要验证的数据字段值。</param>
        </member>
        <member name="M:OSharp.Utility.DataAnnotations.PasswordAttribute.FormatErrorMessage(System.String)">
            <summary>
            基于发生错误的数据字段对错误消息应用格式设置。
            </summary>
            <returns>
            带有格式的错误消息的实例。
            </returns>
            <param name="name">要包括在带有格式的消息中的名称。</param>
        </member>
        <member name="T:OSharp.Utility.Data.AnyRadixConvert">
            <summary>
            任意[2,62]进制转换器
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.AnyRadixConvert.X2H(System.String,System.Int32)">
            <summary>
            将指定基数的数字的字符串表示形式转换为等效的64位有符号整数
            </summary>
            <param name="value">指定基数的数字的字符串表示</param>
            <param name="fromRadix">字符串的基数，必须为[2,62]范围内</param>
            <returns>等效于value的数值的64位有符号整数</returns>
        </member>
        <member name="M:OSharp.Utility.Data.AnyRadixConvert.H2X(System.UInt64,System.Int32)">
            <summary>
            将64位有符号整数形式的数值转换为指定基数的数值的字符串形式
            </summary>
            <param name="value">64位有符号整数形式的数值</param>
            <param name="toRadix">要转换的目标基数，必须为[2,62]范围内</param>
            <returns>指定基数的数值的字符串形式</returns>
        </member>
        <member name="M:OSharp.Utility.Data.AnyRadixConvert.X2X(System.String,System.Int32,System.Int32)">
            <summary>
            任意进制转换，将源进制表示的value转换为目标进制，进制的字母顺序为先大写后小写
            </summary>
            <param name="value">要转换的数据</param>
            <param name="fromRadix">源进制数，必须为[2,62]范围内</param>
            <param name="toRadix">目标进制数，必须为[2,62]范围内</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Data.AnyRadixConvert._10To16(System.Int32)">
            <summary>
            10进制数字转换为16进制字符串
            </summary>
            <param name="value">10进制数</param>
            <returns>16进制数的字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Data.AnyRadixConvert._16To10(System.String)">
            <summary>
            16进制字符串转换为10进制数字
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.CheckExistsType">
            <summary>
            指定可用于表数据存在性检查类型的值
            </summary>
        </member>
        <member name="F:OSharp.Utility.Data.CheckExistsType.Insert">
            <summary>
              插入数据时重复性检查
            </summary>
        </member>
        <member name="F:OSharp.Utility.Data.CheckExistsType.Update">
            <summary>
              编辑数据时重复性检查
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.CombHelper">
            <summary>
            COMB（<see cref="T:System.Guid"/>与<see cref="T:System.DateTime"/>混合构成的可排序<see cref="T:System.Guid"/>）类型操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.CombHelper.NewComb">
            <summary>
            返回Guid用于数据库操作，特定的时间代码可以提高检索效率
            </summary>
            <returns>COMB类型 Guid 数据</returns>
        </member>
        <member name="M:OSharp.Utility.Data.CombHelper.GetDateFromComb(System.Guid)">
            <summary>
            从SQL Server 返回的Guid中生成时间信息
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.Compression">
            <summary>
            压缩操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.Compression.Compress(System.Byte[])">
            <summary>
            对byte数组进行压缩
            </summary>
            <param name="data">待压缩的byte数组</param>
            <returns>压缩后的byte数组</returns>
        </member>
        <member name="M:OSharp.Utility.Data.Compression.Decompress(System.Byte[])">
            <summary>
            对byte[]数组进行解压
            </summary>
            <param name="data">待解压的byte数组</param>
            <returns>解压后的byte数组</returns>
        </member>
        <member name="M:OSharp.Utility.Data.Compression.Compress(System.String)">
            <summary>
            对字符串进行压缩
            </summary>
            <param name="value">待压缩的字符串</param>
            <returns>压缩后的字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Data.Compression.Decompress(System.String)">
            <summary>
            对字符串进行解压
            </summary>
            <param name="value">待解压的字符串</param>
            <returns>解压后的字符串</returns>
        </member>
        <member name="T:OSharp.Utility.Data.DateTimeRange">
            <summary>
            表示一个时间范围
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.DateTimeRange.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.DateTimeRange"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.DateTimeRange"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.StartTime">
            <summary>
            获取或设置 起始时间
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.EndTime">
            <summary>
            获取或设置 结束时间
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.Yesterday">
            <summary>
            获取 昨天的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.Today">
            <summary>
            获取 今天的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.Tomorrow">
            <summary>
            获取 明天的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.LastWeek">
            <summary>
            获取 上周的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.ThisWeek">
            <summary>
            获取 本周的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.NextWeek">
            <summary>
            获取 下周的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.LastMonth">
            <summary>
            获取 上个月的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.ThisMonth">
            <summary>
            获取 本月的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.NextMonth">
            <summary>
            获取 下个月的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.LastYear">
            <summary>
            获取 上一年的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.ThisYear">
            <summary>
            获取 本年的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.NextYear">
            <summary>
            获取 下一年的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.Last30Days">
            <summary>
            获取 过去30天的时间范围
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.DateTimeRange.Last7Days">
            <summary>
            获取 过去7天的时间范围
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.DateTimeRange.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="T:OSharp.Utility.Data.IOSharpResult`1">
            <summary>
            OSharp操作结果
            </summary>
            <typeparam name="TResultType"></typeparam>
        </member>
        <member name="T:OSharp.Utility.Data.IOSharpResult`2">
            <summary>
            OSharp操作结果
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.IOSharpResult`2.ResultType">
            <summary>
            获取或设置 结果类型
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.IOSharpResult`2.Message">
            <summary>
            获取或设置 返回消息
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.IOSharpResult`2.Data">
            <summary>
            获取或设置 结果数据
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.JsonHelper">
            <summary>
            JSON辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.JsonHelper.JsonDateTimeFormat(System.String)">
            <summary>
            处理Json的时间格式为正常格式
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.JsonHelper.ToJson(System.Object)">
            <summary>
            把对象序列化成Json字符串格式
            </summary>
            <param name="object">Json 对象</param>
            <returns>Json 字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Data.JsonHelper.FromJson``1(System.String)">
            <summary>
            把Json字符串转换为强类型对象
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.MathHelper">
            <summary>
            数据计算辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.MathHelper.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            获取两个坐标的距离
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.OperationResult">
            <summary>
            业务操作结果信息类，对操作结果进行封装
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OperationResult.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OperationResult.#ctor(OSharp.Utility.Data.OperationResultType)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OperationResult.#ctor(OSharp.Utility.Data.OperationResultType,System.String)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OperationResult.#ctor(OSharp.Utility.Data.OperationResultType,System.String,System.Object)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.OperationResult.Success">
            <summary>
            获取或设置 成功的操作结果
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.OperationResult.NoChanged">
            <summary>
            获取或设置 未变更的操作结果
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.OperationResult`1">
            <summary>
            泛型版本的业务操作结果信息类，对操作结果进行封装
            </summary>
            <typeparam name="TData">返回数据的类型</typeparam>
        </member>
        <member name="M:OSharp.Utility.Data.OperationResult`1.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OperationResult"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OperationResult`1.#ctor(OSharp.Utility.Data.OperationResultType)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OperationResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OperationResult`1.#ctor(OSharp.Utility.Data.OperationResultType,System.String)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OperationResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OperationResult`1.#ctor(OSharp.Utility.Data.OperationResultType,System.String,`0)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OperationResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.OperationResult`1.Successed">
            <summary>
            获取 是否成功
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.OperationResultType">
            <summary>
            表示业务操作结果的枚举
            </summary>
        </member>
        <member name="F:OSharp.Utility.Data.OperationResultType.Error">
            <summary>
              操作引发错误
            </summary>
        </member>
        <member name="F:OSharp.Utility.Data.OperationResultType.Success">
            <summary>
              操作成功
            </summary>
        </member>
        <member name="F:OSharp.Utility.Data.OperationResultType.ValidError">
            <summary>
              输入信息验证失败
            </summary>
        </member>
        <member name="F:OSharp.Utility.Data.OperationResultType.QueryNull">
            <summary>
              指定参数的数据不存在
            </summary>
        </member>
        <member name="F:OSharp.Utility.Data.OperationResultType.NoChanged">
            <summary>
              操作取消或操作没引发任何变化
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.OSharpResult`1">
            <summary>
            OSharp结果基类
            </summary>
            <typeparam name="TResultType"></typeparam>
        </member>
        <member name="M:OSharp.Utility.Data.OSharpResult`1.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OSharpResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OSharpResult`1.#ctor(`0)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OSharpResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OSharpResult`1.#ctor(`0,System.String)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OSharpResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OSharpResult`1.#ctor(`0,System.String,System.Object)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OSharpResult`1"/>类型的新实例
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.OSharpResult`2">
            <summary>
            OSharp结果基类
            </summary>
            <typeparam name="TResultType">结果类型</typeparam>
            <typeparam name="TData">结果数据类型</typeparam>
        </member>
        <member name="M:OSharp.Utility.Data.OSharpResult`2.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OSharpResult`2"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OSharpResult`2.#ctor(`0)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OSharpResult`2"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OSharpResult`2.#ctor(`0,System.String)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OSharpResult`2"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.OSharpResult`2.#ctor(`0,System.String,`1)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Data.OSharpResult`2"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.OSharpResult`2.ResultType">
            <summary>
            获取或设置 结果类型
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.OSharpResult`2.Message">
            <summary>
            获取或设置 返回消息
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.OSharpResult`2.Data">
            <summary>
            获取或设置 结果数据
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.PageCondition">
            <summary>
            分页查询条件信息
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.PageCondition.#ctor">
            <summary>
            初始化一个 默认参数（第1页，每页20，排序条件为空）的分页查询条件信息类 的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.PageCondition.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化一个 指定页索引与页大小的分页查询条件信息类 的新实例
            </summary>
            <param name="pageIndex"> 页索引 </param>
            <param name="pageSize"> 页大小 </param>
        </member>
        <member name="P:OSharp.Utility.Data.PageCondition.PageIndex">
            <summary>
            获取或设置 页索引
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.PageCondition.PageSize">
            <summary>
            获取或设置 页大小
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.PageCondition.SortConditions">
            <summary>
            获取或设置 排序条件组
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.SerializeHelper">
            <summary>
            序列化辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.SerializeHelper.ToBinary(System.Object)">
            <summary>
            将数据序列化为二进制数组
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.SerializeHelper.FromBinary``1(System.Byte[])">
            <summary>
            将二进制数组反序列化为强类型数据
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.SerializeHelper.ToBinaryFile(System.Object,System.String)">
            <summary>
            将数据序列化为二进制数组并写入文件中
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.SerializeHelper.FromBinaryFile``1(System.String)">
            <summary>
            将指定二进制数据文件还原为强类型数据
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.SerializeHelper.ToXml(System.Object)">
            <summary>
            将数据序列化为XML形式
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.SerializeHelper.FromXml``1(System.String)">
            <summary>
            将XML数据反序列化为强类型
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.SerializeHelper.ToXmlFile(System.Object,System.String)">
            <summary>
            将数据序列化为XML并写入文件
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.SerializeHelper.FromXmlFile``1(System.String)">
            <summary>
            将指定XML数据文件还原为强类型数据
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.Singleton`1">
            <summary>
            定义一个指定类型的单例，该实例的生命周期将跟随整个应用程序。
            </summary>
            <typeparam name="T">要创建单例的类型。</typeparam>
        </member>
        <member name="P:OSharp.Utility.Data.Singleton`1.Instance">
            <summary>
            获取指定类型的单例实例
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.Singleton">
            <summary>
            提供一个字典容器，按类型装载所有<see cref="T:OSharp.Utility.Data.Singleton`1"/>的单例实例
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.Singleton.AllSingletons">
            <summary>
            获取 单例对象字典
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.SingletonDictionary`2">
            <summary>
            创建一个单例字典，该实例的生命周期将跟随整个应用程序
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
        </member>
        <member name="P:OSharp.Utility.Data.SingletonDictionary`2.Instance">
            <summary>
            获取指定类型的字典的单例实例
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.SingletonList`1">
            <summary>
            创建一个类型列表的单例，该实例的生命周期将跟随整个应用程序
            </summary>
            <typeparam name="T">要创建的列表元素的类型</typeparam>
        </member>
        <member name="P:OSharp.Utility.Data.SingletonList`1.Instance">
            <summary>
            获取指定类型的列表的单例实例
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.SortCondition">
            <summary>
            列表字段排序条件
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.SortCondition.#ctor(System.String)">
            <summary>
            构造一个指定字段名称的升序排序的排序条件
            </summary>
            <param name="sortField">字段名称</param>
        </member>
        <member name="M:OSharp.Utility.Data.SortCondition.#ctor(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            构造一个排序字段名称和排序方式的排序条件
            </summary>
            <param name="sortField">字段名称</param>
            <param name="listSortDirection">排序方式</param>
        </member>
        <member name="P:OSharp.Utility.Data.SortCondition.SortField">
            <summary>
            获取或设置 排序字段名称
            </summary>
        </member>
        <member name="P:OSharp.Utility.Data.SortCondition.ListSortDirection">
            <summary>
            获取或设置 排序方向
            </summary>
        </member>
        <member name="T:OSharp.Utility.Data.SortCondition`1">
            <summary>
            支持泛型的列表字段排序条件
            </summary>
            <typeparam name="T">列表元素类型</typeparam>
        </member>
        <member name="M:OSharp.Utility.Data.SortCondition`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            使用排序字段 初始化一个<see cref="T:OSharp.Utility.Data.SortCondition"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.SortCondition`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.ComponentModel.ListSortDirection)">
            <summary>
            使用排序字段与排序方式 初始化一个<see cref="T:OSharp.Utility.Data.SortCondition"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Data.SortCondition`1.GetPropertyName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            从泛型委托获取属性名
            </summary>
        </member>
        <member name="T:OSharp.Utility.Develop.CodeRamer">
            <summary>
            代码性能测试内存计算工具
            </summary>
        </member>
        <member name="M:OSharp.Utility.Develop.CodeRamer.Initialize">
            <summary>
            内存计算初始化，同时后续操作进行预热，以避免初次操作带来的性能影响
            </summary>
        </member>
        <member name="M:OSharp.Utility.Develop.CodeRamer.Ram(System.String,System.Action)">
            <summary>
            内存计算，传入操作标识名，重复次数，操作过程获取操作的性能数据
            </summary>
            <param name="name"> 操作标识名 </param>
            <param name="action"> 操作过程的Action </param>
        </member>
        <member name="T:OSharp.Utility.Develop.CodeTimer">
            <summary>
            代码性能测试计时器（来自博客园-老赵）
            </summary>
        </member>
        <member name="M:OSharp.Utility.Develop.CodeTimer.GetCycleCount">
            <summary>
            获取当前CPU循环次数
            </summary>
            <returns> </returns>
        </member>
        <member name="M:OSharp.Utility.Develop.CodeTimer.Initialize">
            <summary>
            计时器初始化 对计时器进行初始化操作，同时对后续操作进行预热，以避免初次操作带来的性能影响
            </summary>
        </member>
        <member name="M:OSharp.Utility.Develop.CodeTimer.Time(System.String,System.Int32,System.Action)">
            <summary>
            计时器，传入操作标识名，重复次数，操作过程获取操作的性能数据
            </summary>
            <param name="name"> 操作标识名 </param>
            <param name="iteration"> 重复次数 </param>
            <param name="action"> 操作过程的Action </param>
        </member>
        <member name="T:OSharp.Utility.Develop.T4.T4ModelInfo">
            <summary>
            T4实体模型信息类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Develop.T4.T4ModelInfo.#ctor(System.Type,System.Boolean)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Develop.T4.T4ModelInfo"/>类型的新实例
            </summary>
            <param name="modelType">实体类型</param>
            <param name="useModuleDir">是否使用模块文件夹</param>
        </member>
        <member name="P:OSharp.Utility.Develop.T4.T4ModelInfo.KeyType">
            <summary>
            获取或设置 主键类型
            </summary>
        </member>
        <member name="P:OSharp.Utility.Develop.T4.T4ModelInfo.UseModuleDir">
            <summary>
            获取 是否使用模块文件夹
            </summary>
        </member>
        <member name="P:OSharp.Utility.Develop.T4.T4ModelInfo.ModuleName">
            <summary>
            获取 模型所在模块名称
            </summary>
        </member>
        <member name="P:OSharp.Utility.Develop.T4.T4ModelInfo.Namespace">
            <summary>
            获取 模型命名空间
            </summary>
        </member>
        <member name="P:OSharp.Utility.Develop.T4.T4ModelInfo.Name">
            <summary>
            获取 模型名称
            </summary>
        </member>
        <member name="P:OSharp.Utility.Develop.T4.T4ModelInfo.Description">
            <summary>
            获取 模型描述
            </summary>
        </member>
        <member name="P:OSharp.Utility.Develop.T4.T4ModelInfo.Properties">
            <summary>
            属性信息集合
            </summary>
        </member>
        <member name="P:OSharp.Utility.Develop.T4.T4ModelInfo.ProjectName">
            <summary>
            获取或设置 工程名称，生成代码的命名空间都基于此名称
            </summary>
        </member>
        <member name="T:OSharp.Utility.Disposable">
            <summary>
            用于实现<see cref="T:System.IDisposable"/>接口，表示当前类型是可释放的
            </summary>
        </member>
        <member name="M:OSharp.Utility.Disposable.Dispose">
            <summary>
            释放对象，用于外部调用
            </summary>
        </member>
        <member name="M:OSharp.Utility.Disposable.Finalize">
            <summary>
            释放当前对象时释放资源
            </summary>
        </member>
        <member name="M:OSharp.Utility.Disposable.Dispose(System.Boolean)">
            <summary>
            重写以实现释放对象的逻辑
            </summary>
            <param name="disposing">是否要释放对象</param>
        </member>
        <member name="M:OSharp.Utility.Disposable.Disposing">
            <summary>
            重写以实现释放派生类资源的逻辑
            </summary>
        </member>
        <member name="T:OSharp.Utility.Drawing.ValidateCoder">
            <summary>
            验证码生成类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Drawing.ValidateCoder.#ctor">
            <summary>
            初始化<see cref="T:OSharp.Utility.Drawing.ValidateCoder"/>类的新实例
            </summary>
        </member>
        <member name="P:OSharp.Utility.Drawing.ValidateCoder.FontNames">
            <summary>
            获取或设置 字体名称集合
            </summary>
        </member>
        <member name="P:OSharp.Utility.Drawing.ValidateCoder.FontNamesForHanzi">
            <summary>
            获取或设置 汉字字体名称集合
            </summary>
        </member>
        <member name="P:OSharp.Utility.Drawing.ValidateCoder.FontSize">
            <summary>
            获取或设置 字体大小
            </summary>
        </member>
        <member name="P:OSharp.Utility.Drawing.ValidateCoder.FontWidth">
            <summary>
            获取或设置 字体宽度
            </summary>
        </member>
        <member name="P:OSharp.Utility.Drawing.ValidateCoder.Height">
            <summary>
            获取或设置 图片高度
            </summary>
        </member>
        <member name="P:OSharp.Utility.Drawing.ValidateCoder.BgColor">
            <summary>
            获取或设置 背景颜色
            </summary>
        </member>
        <member name="P:OSharp.Utility.Drawing.ValidateCoder.HasBorder">
            <summary>
            获取或设置 是否有边框
            </summary>
        </member>
        <member name="P:OSharp.Utility.Drawing.ValidateCoder.RandomPosition">
            <summary>
            获取或设置 是否随机位置
            </summary>
        </member>
        <member name="P:OSharp.Utility.Drawing.ValidateCoder.RandomColor">
            <summary>
            获取或设置 是否随机字体颜色
            </summary>
        </member>
        <member name="P:OSharp.Utility.Drawing.ValidateCoder.RandomItalic">
            <summary>
            获取或设置 是否随机倾斜字体
            </summary>
        </member>
        <member name="P:OSharp.Utility.Drawing.ValidateCoder.RandomPointPercent">
            <summary>
            获取或设置 随机干扰点百分比（百分数形式）
            </summary>
        </member>
        <member name="P:OSharp.Utility.Drawing.ValidateCoder.RandomLineCount">
            <summary>
            获取或设置 随机干扰线数量
            </summary>
        </member>
        <member name="M:OSharp.Utility.Drawing.ValidateCoder.GetCode(System.Int32,OSharp.Utility.Drawing.ValidateCodeType)">
            <summary>
            获取指定长度的验证码字符串
            </summary>
        </member>
        <member name="M:OSharp.Utility.Drawing.ValidateCoder.CreateImage(System.String,OSharp.Utility.Drawing.ValidateCodeType)">
            <summary>
            获取指定字符串的验证码图片
            </summary>
        </member>
        <member name="M:OSharp.Utility.Drawing.ValidateCoder.CreateImage(System.Int32,System.String@,OSharp.Utility.Drawing.ValidateCodeType)">
            <summary>
            获取指定长度的验证码图片
            </summary>
        </member>
        <member name="M:OSharp.Utility.Drawing.ValidateCoder.GetRandomHanzis(System.Int32)">
            <summary>
            获取汉字验证码
            </summary>
            <param name="length">验证码长度</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Utility.Drawing.ValidateCodeType">
            <summary>
            验证码类型
            </summary>
        </member>
        <member name="F:OSharp.Utility.Drawing.ValidateCodeType.Number">
            <summary>
            纯数值
            </summary>
        </member>
        <member name="F:OSharp.Utility.Drawing.ValidateCodeType.NumberAndLetter">
            <summary>
            数值与字母的组合
            </summary>
        </member>
        <member name="F:OSharp.Utility.Drawing.ValidateCodeType.Hanzi">
            <summary>
            汉字
            </summary>
        </member>
        <member name="T:OSharp.Utility.Dynamic.Exposed">
            <summary>
            Exposes hidden (private/protected/internal) members of an
            <see langword="object"/> or <see cref="T:System.Type"/> through a <see langword="dynamic"/> wrapper.
            </summary>
        </member>
        <member name="F:OSharp.Utility.Dynamic.Exposed.value">
            <summary>
            The <see langword="object"/> that is being exposed.
            <see langword="null"/> if static members of a <see cref="T:System.Type"/> are being exposed.
            </summary>
        </member>
        <member name="M:OSharp.Utility.Dynamic.Exposed.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:OSharp.Utility.Dynamic.Exposed"/> class. 
            Creates a new wrapper for accessing members of subject.
            </summary>
            <param name="subject">
            The object which will have it's members exposed.
            </param>
            <returns>
            A new wrapper around the subject.
            </returns>
        </member>
        <member name="M:OSharp.Utility.Dynamic.Exposed.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:OSharp.Utility.Dynamic.Exposed"/> class. 
            Creates a new wrapper for accessing hidden static members of a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> which will have it's static members exposed.
            </param>
            <returns>
            A new wrapper around a <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="P:OSharp.Utility.Dynamic.Exposed.SubjectType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the exposed object.
            </summary>
        </member>
        <member name="M:OSharp.Utility.Dynamic.Exposed.From(System.Object)">
            <summary>
            Creates a new wrapper for accessing members of subject.
            </summary>
            <param name="subject">
            The object which will have it's members exposed.
            </param>
            <returns>
            A new wrapper around the subject.
            </returns>
        </member>
        <member name="M:OSharp.Utility.Dynamic.Exposed.From(System.Type)">
            <summary>
            Creates a new wrapper for accessing hidden static members of a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> which will have it's static members exposed.
            </param>
            <returns>
            A new wrapper around a <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:OSharp.Utility.Dynamic.Exposed.New(System.Type)">
            <summary>
            Creates a new wrapper for accessing members of a new instance of <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of which an instance will have it's members exposed.
            </param>
            <returns>
            A new wrapper around a new instance of <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:OSharp.Utility.Dynamic.Exposed.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">
            The expression tree representation of the runtime value.
            </param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="T:OSharp.Utility.Dynamic.MetaObject">
            <summary>
            Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.
            </summary>
        </member>
        <member name="F:OSharp.Utility.Dynamic.MetaObject.isStatic">
            <summary>
            Should this <see cref="T:OSharp.Utility.Dynamic.MetaObject"/> bind to <see langword="static"/> or instance methods and fields.
            </summary>
        </member>
        <member name="M:OSharp.Utility.Dynamic.MetaObject.#ctor(System.Linq.Expressions.Expression,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OSharp.Utility.Dynamic.MetaObject"/> class.
            </summary>
            <param name="expression">
            The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject"/> during the dynamic binding process.
            </param>
            <param name="value">
            The runtime value represented by the <see cref="T:System.Dynamic.DynamicMetaObject"/>.
            </param>
            <param name="staticBind">
            Should this MetaObject bind to <see langword="static"/> or instance methods and fields.
            </param>
        </member>
        <member name="M:OSharp.Utility.Dynamic.MetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            Performs the binding of the dynamic invoke member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.InvokeMemberBinder"/> that represents the details of the dynamic operation.
            </param>
            <param name="args">
            An array of <see cref="T:System.Dynamic.DynamicMetaObject"/> instances - arguments to the invoke member operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.
            </returns>
            <exception cref="T:System.MissingMemberException">
            There is an attempt to dynamically access a class member that does not exist.
            </exception>
        </member>
        <member name="M:OSharp.Utility.Dynamic.MetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
            <summary>
            Performs the binding of the dynamic get member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.GetMemberBinder"/> that represents the details of the dynamic operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.
            </returns>
        </member>
        <member name="M:OSharp.Utility.Dynamic.MetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
            <summary>
            Performs the binding of the dynamic set member operation.
            </summary>
            <param name="binder">
            An instance of the <see cref="T:System.Dynamic.SetMemberBinder"/> that represents the details of the dynamic operation.
            </param>
            <param name="value">
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the value for the set member operation.
            </param>
            <returns>
            The new <see cref="T:System.Dynamic.DynamicMetaObject"/> representing the result of the binding.
            </returns>
        </member>
        <member name="M:OSharp.Utility.Dynamic.MetaObject.GetMemberExpression(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Generates the <see cref="T:System.Linq.Expressions.Expression"/> for accessing a member by name.
            </summary>
            <param name="self">
            The <see cref="T:System.Linq.Expressions.Expression"/> for accessing the <see cref="T:OSharp.Utility.Dynamic.Exposed"/> instance.
            </param>
            <param name="memberName">
            The member name.
            </param>
            <returns>
            <see cref="T:System.Linq.Expressions.MemberExpression"/> for accessing a member by name.
            </returns>
            <exception cref="T:System.MissingMemberException">
            </exception>
        </member>
        <member name="M:OSharp.Utility.Dynamic.MetaObject.ConvertExpressionType(System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Coerces the expression type into the expected return type.
            </summary>
            <param name="expectedType">Type expeted at the dispatch site.</param>
            <param name="target">Expression to coerce.</param>
            <remarks>Dynamic dispatch expects a <see langword="void"/> method to return <see langword="null"/>.</remarks>
            <returns>Target expression coerced to the required type.</returns>
        </member>
        <member name="M:OSharp.Utility.Dynamic.MetaObject.GetBindingFlags">
            <summary>
            Returns <see cref="T:System.Reflection.BindingFlags"/> for member search.
            </summary>
            <returns>
            Static or instance flags depending on <see cref="F:OSharp.Utility.Dynamic.MetaObject.isStatic"/>.
            </returns>
        </member>
        <member name="T:OSharp.Utility.Extensions.BitmapExtensions">
            <summary>
            图像扩展辅助操作
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Rotate(System.Drawing.Bitmap,System.Int32)">
            <summary>
            使图像绕中心点旋转一定角度
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="angle"> 旋转的角度，正值为逆时针方向 </param>
            <returns> 旋转后的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Zoom(System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            按指定宽度与高度缩放图像
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="width"> 缩放后的宽度 </param>
            <param name="height"> 缩放后的高度 </param>
            <param name="model">图像质量模式</param>
            <returns> 缩放后的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Zoom(System.Drawing.Bitmap,System.Double,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            按指定百分比缩放图像
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="percent"> 缩放百分比（小数） </param>
            <param name="model">图像质量模式</param>
            <returns> 缩放后的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Gray(System.Drawing.Bitmap)">
            <summary>
            图像灰度化
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 灰度化后的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Brightness(System.Drawing.Bitmap,System.Int32)">
            <summary>
            调整图像亮度
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="value"> 调整的亮度值，取值为[-255, 255] </param>
            <returns> 调整亮度后的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Contrast(System.Drawing.Bitmap,System.Int32)">
            <summary>
            调整图像对比度
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="value"> 调整的对比度，取值为[-100, 100] </param>
            <returns> 调整对比度后的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Gamma(System.Drawing.Bitmap,System.Single)">
            <summary>
            Gamma校正
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="value"> Gamma值 </param>
            <returns> Gamma校正后的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.SetText(System.Drawing.Bitmap,System.String,System.Drawing.Font,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            在图片上打印文字
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="text"> 要打印的文字 </param>
            <param name="font"> 字体信息 </param>
            <param name="color"> 文字颜色 </param>
            <param name="x"> 文字位置横坐标 </param>
            <param name="y"> 文字位置纵坐标 </param>
            <returns> 打印文字后的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Plate(System.Drawing.Bitmap)">
            <summary>
            底片效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 底片效果的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Emboss(System.Drawing.Bitmap)">
            <summary>
            浮雕效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 浮雕效果的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Soften(System.Drawing.Bitmap)">
            <summary>
            柔化效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 柔化效果的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Sharpen(System.Drawing.Bitmap)">
            <summary>
            锐化效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 锐化效果的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Atomizing(System.Drawing.Bitmap)">
            <summary>
            雾化效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 雾化效果的图像 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Binaryzation(System.Drawing.Bitmap)">
            <summary>
            二值化效果
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Binaryzation1(System.Drawing.Bitmap,System.Byte)">
            <summary>
            固定阈值的二值化
            </summary>
            <param name="bmp"> </param>
            <param name="threshold"> </param>
            <returns> </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.OtsuThreshold(System.Drawing.Bitmap)">
            <summary>
            OTSU阈值法二值化
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.BitmapExtensions.Threshoding(System.Drawing.Bitmap,System.Byte)">
            <summary>
            固定阈值的二值化
            </summary>
            <param name="bmp"> </param>
            <param name="threshold"> </param>
            <returns> </returns>
        </member>
        <member name="T:OSharp.Utility.Extensions.DateTimeExtensions">
            <summary>
            时间扩展操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            当前时间是否周末
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.DateTimeExtensions.IsWeekday(System.DateTime)">
            <summary>
            当前时间是否工作日
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.DateTimeExtensions.ConvertDateTimeInt(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="time"> DateTime时间格式</param>
            <returns>Unix时间戳格式</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.DateTimeExtensions.GetWeekBeginAndEndTime(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            获取本周的开始时间和结束时间
            </summary>
            <param name="time">时间</param>
            <param name="begin">返回本周的开始时间</param>
            <param name="end">返回本周的结束时间</param>
        </member>
        <member name="M:OSharp.Utility.Extensions.DateTimeExtensions.GetMonthBeginAndEndTime(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            获取月份开始和结束时间
            </summary>
            <param name="time"></param>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="M:OSharp.Utility.Extensions.DateTimeExtensions.GetTimeInWeekCount(System.DateTime)">
            <summary>
            获取今天是本周的第几天
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.DateTimeExtensions.FormatStr(System.DateTime)">
            <summary>
            格式化时间
            yyyy-MM-dd
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.DateTimeExtensions.FormatHH(System.DateTime)">
            <summary>
            格式化时间
            yyyy-MM-dd hh:mm:ss
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.DateTimeExtensions.GetMonthBegin(System.DateTime)">
            <summary>
            月份开始时间
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.DateTimeExtensions.GetMonthEnd(System.DateTime)">
            <summary>
            月份结束时间
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Utility.Extensions.AssemblyExtensions">
            <summary>
            程序集扩展操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.AssemblyExtensions.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的文件版本
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.AssemblyExtensions.GetProductVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的产品版本
            </summary>
        </member>
        <member name="T:OSharp.Utility.Extensions.BooleanExtensions">
            <summary>
            布尔值<see cref="T:System.Boolean"/>类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.BooleanExtensions.ToLower(System.Boolean)">
            <summary>
            把布尔值转换为小写字符串
            </summary>
        </member>
        <member name="T:OSharp.Utility.Extensions.CollectionExtensions">
            <summary>
            集合扩展方法类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            将集合展开并分别转换成字符串，再以指定的分隔符衔接，拼成一个字符串返回。默认分隔符为逗号
            </summary>
            <param name="collection"> 要处理的集合 </param>
            <param name="separator"> 分隔符，默认为逗号 </param>
            <returns> 拼接后的字符串 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            循环集合的每一项，调用委托生成字符串，返回合并后的字符串。默认分隔符为逗号
            </summary>
            <param name="collection">待处理的集合</param>
            <param name="itemFormatFunc">单个集合项的转换委托</param>
            <param name="separetor">分隔符，默认为逗号</param>
            <typeparam name="T">泛型类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合是否为空
            </summary>
            <param name="collection"> 要处理的集合 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 为空返回True，不为空返回False </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            根据第三方条件是否为真来决定是否执行指定条件的查询
            </summary>
            <param name="source"> 要查询的源 </param>
            <param name="predicate"> 查询条件 </param>
            <param name="condition"> 第三方条件 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 查询的结果 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            根据指定条件返回集合中不重复的元素
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <typeparam name="TKey">动态筛选条件类型</typeparam>
            <param name="source">要操作的源</param>
            <param name="keySelector">重复数据筛选条件</param>
            <returns>不重复元素的集合</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Collections.Generic.IEnumerable`1"/>集合按指定字段与排序方式进行排序
            </summary>
            <typeparam name="T">集合项类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns>排序后的数据集</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Utility.Data.SortCondition)">
            <summary>
            把<see cref="T:System.Collections.Generic.IEnumerable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},OSharp.Utility.Data.SortCondition{``0})">
            <summary>
            把<see cref="T:System.Collections.Generic.IEnumerable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Linq.IOrderedQueryable`1"/>集合继续按指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},OSharp.Utility.Data.SortCondition)">
            <summary>
            把<see cref="T:System.Linq.IOrderedEnumerable`1"/>集合继续指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            根据第三方条件是否为真来决定是否执行指定条件的查询
            </summary>
            <param name="source"> 要查询的源 </param>
            <param name="predicate"> 查询条件 </param>
            <param name="condition"> 第三方条件 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 查询的结果 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Linq.IQueryable`1"/>集合按指定字段与排序方式进行排序
            </summary>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <typeparam name="T">动态类型</typeparam>
            <returns>排序后的数据集</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},OSharp.Utility.Data.SortCondition)">
            <summary>
            把<see cref="T:System.Linq.IQueryable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},OSharp.Utility.Data.SortCondition{``0})">
            <summary>
            把<see cref="T:System.Linq.IQueryable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Linq.IOrderedQueryable`1"/>集合继续按指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.CollectionExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},OSharp.Utility.Data.SortCondition)">
            <summary>
            把<see cref="T:System.Linq.IOrderedQueryable`1"/>集合继续指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Utility.Extensions.EnumExtensions">
            <summary>
            枚举<see cref="T:System.Enum"/>的扩展辅助操作方法
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            获取枚举项上的<see cref="T:System.ComponentModel.DescriptionAttribute"/>特性的文字描述
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.EnumExtensions.ToDictionary(System.Type)">
            <summary>
            把枚举转换为键值对集合
            </summary>
            <param name="enumType">枚举类型</param>
            <returns>以枚举值为key，枚举文本为value的键值对集合</returns>
        </member>
        <member name="T:OSharp.Utility.Extensions.ExceptionExtensions">
            <summary>
            异常操作扩展
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.ExceptionExtensions.FormatMessage(System.Exception,System.Boolean)">
            <summary>
            格式化异常消息
            </summary>
            <param name="e">异常对象</param>
            <param name="isHideStackTrace">是否隐藏异常规模信息</param>
            <returns>格式化后的异常信息字符串</returns>
        </member>
        <member name="T:OSharp.Utility.Extensions.ExpressionExtensions">
            <summary>
            Expression表达式扩展操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            以特定的条件运行组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <param name="merge">组合条件运算方式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.AndAlso 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.OrElse 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="T:OSharp.Utility.Extensions.LinqToXmlExtensions">
            <summary>
            Xml 扩展操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.LinqToXmlExtensions.ToXElement(System.Xml.XmlNode)">
            <summary>
            将XmlNode转换为XElement
            </summary>
            <returns> XElment对象 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.LinqToXmlExtensions.ToXmlNode(System.Xml.Linq.XElement)">
            <summary>
            将XElement转换为XmlNode
            </summary>
            <returns> 转换后的XmlNode </returns>
        </member>
        <member name="T:OSharp.Utility.Extensions.MemoryCacheExtensions">
            <summary>
            内存缓存扩展操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.MemoryCacheExtensions.Get``1(System.Runtime.Caching.MemoryCache,System.String,System.String)">
            <summary>
            获取指定键值的强类型数据
            </summary>
            <typeparam name="T">强类型</typeparam>
            <param name="cache"></param>
            <param name="key">缓存键值</param>
            <param name="regionName">区域名称，默认不支持</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Utility.Extensions.ObjectExtensions">
            <summary>
            基类型<see cref="T:System.Object"/>扩展辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)">
            <summary>
            把对象类型转换为指定类型
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.ObjectExtensions.CastTo``1(System.Object)">
            <summary>
            把对象类型转化为指定类型
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <returns> 转化后的指定类型的对象，转化失败引发异常。 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)">
            <summary>
            把对象类型转化为指定类型，转化失败时返回指定的默认值
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <param name="defaultValue"> 转化失败返回的指定默认值 </param>
            <returns> 转化后的指定类型对象，转化失败时返回指定的默认值 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.ObjectExtensions.IsBetween``1(System.IComparable{``0},``0,``0,System.Boolean,System.Boolean)">
            <summary>
            判断当前值是否介于指定范围内
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 动态类型对象 </param>
            <param name="start"> 范围起点 </param>
            <param name="end"> 范围终点 </param>
            <param name="leftEqual"> 是否可等于上限（默认等于） </param>
            <param name="rightEqual"> 是否可等于下限（默认等于） </param>
            <returns> 是否介于 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.ObjectExtensions.ToJsonString``1(``0)">
            <summary>
            将对象序列化为JSON字符串，不支持存在循环引用的对象
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="value">动态类型对象</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.ObjectExtensions.ToDynamic(System.Object)">
            <summary>
            将对象[主要是匿名对象]转换为dynamic
            </summary>
        </member>
        <member name="T:OSharp.Utility.Extensions.RandomExtensions">
            <summary>
            随机数<see cref="T:System.Random"/>类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.RandomExtensions.NextBoolean(System.Random)">
            <summary>
            返回随机布尔值
            </summary>
            <param name="random"></param>
            <returns>随机布尔值</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.RandomExtensions.NextEnum``1(System.Random)">
            <summary>
            返回指定枚举类型的随机枚举值
            </summary>
            <param name="random"></param>
            <returns>指定枚举类型的随机枚举值</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.RandomExtensions.NextBytes(System.Random,System.Int32)">
            <summary>
            返回随机数填充的指定长度的数组
            </summary>
            <param name="random"></param>
            <param name="length">数组长度</param>
            <returns>随机数填充的指定长度的数组</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.RandomExtensions.NextItem``1(System.Random,``0[])">
            <summary>
            返回数组中的随机元素
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="random"></param>
            <param name="items">元素数组</param>
            <returns>元素数组中的某个随机项</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.RandomExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
            返回指定时间段内的随机时间值
            </summary>
            <param name="random"></param>
            <param name="minValue">时间范围的最小值</param>
            <param name="maxValue">时间范围的最大值</param>
            <returns>指定时间段内的随机时间值</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.RandomExtensions.NextDateTime(System.Random)">
            <summary>
            返回随机时间值
            </summary>
            <param name="random"></param>
            <returns>随机时间值</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.RandomExtensions.GetRandomNumberString(System.Random,System.Int32)">
            <summary>
            获取指定的长度的随机数字字符串
            </summary>
            <param name="random"></param>
            <param name="length">要获取随机数长度</param>
            <returns>指定长度的随机数字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.RandomExtensions.GetRandomLetterString(System.Random,System.Int32)">
            <summary>
            获取指定的长度的随机字母字符串
            </summary>
            <param name="random"></param>
            <param name="length">要获取随机数长度</param>
            <returns>指定长度的随机字母组成字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.RandomExtensions.GetRandomLetterAndNumberString(System.Random,System.Int32)">
            <summary>
            获取指定的长度的随机字母和数字字符串
            </summary>
            <param name="random"></param>
            <param name="length">要获取随机数长度</param>
            <returns>指定长度的随机字母和数字组成字符串</returns>
        </member>
        <member name="T:OSharp.Utility.Extensions.StringBuilderExtensions">
            <summary>
            StringBuilder 扩展方法类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder)">
            <summary>
            去除<seealso cref="T:System.Text.StringBuilder"/>开头的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char)">
            <summary>
            去除<seealso cref="T:System.Text.StringBuilder"/>开头的指定<seealso cref="T:System.Char"/>
            </summary>
            <param name="sb"></param>
            <param name="c">要去掉的<seealso cref="T:System.Char"/></param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除<seealso cref="T:System.Text.StringBuilder"/>开头的指定字符数组
            </summary>
            <param name="sb"></param>
            <param name="cs">要去掉的字符数组</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.String)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>开头的指定的<seealso cref="T:System.String"/>
            </summary>
            <param name="sb"></param>
            <param name="str">要去掉的<seealso cref="T:System.String"/></param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder)">
            <summary>
            去除StringBuilder结尾的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>结尾指定字符
            </summary>
            <param name="sb"></param>
            <param name="c">要去掉的字符</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>结尾指定字符数组
            </summary>
            <param name="sb"></param>
            <param name="chars">要去除的字符数组</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.String)">
            <summary>
            去除<see cref="T:System.Text.StringBuilder"/>结尾指定字符串
            </summary>
            <param name="sb"></param>
            <param name="str">要去除的字符串</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringBuilderExtensions.Trim(System.Text.StringBuilder)">
            <summary>
            去除StringBuilder两端的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringBuilderExtensions.SubString(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            返回<see cref="T:System.Text.StringBuilder"/>从起始位置指定长度的字符串
            </summary>
            <param name="sb"></param>
            <param name="start">起始位置</param>
            <param name="length">长度</param>
            <returns>字符串</returns>
            <exception cref="T:System.OverflowException">超出字符串索引长度异常</exception>
        </member>
        <member name="T:OSharp.Utility.Extensions.StringExtensions">
            <summary>
            字符串<see cref="T:System.String"/>类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.IsMatch(System.String,System.String)">
            <summary>
            指示所指定的正则表达式在指定的输入字符串中是否找到了匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.Match(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的第一个匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>一个对象，包含有关匹配项的信息</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.Matches(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的所有匹配项的字符串集合
            </summary>
            <param name="value"> 要搜索匹配项的字符串 </param>
            <param name="pattern"> 要匹配的正则表达式模式 </param>
            <returns> 一个集合，包含有关匹配项的字符串值 </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.IsEmail(System.String)">
            <summary>
            是否电子邮件
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.IsIpAddress(System.String)">
            <summary>
            是否是IP地址
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.IsNumeric(System.String)">
            <summary>
            是否是整数
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.IsUnicode(System.String)">
            <summary>
            是否是Unicode字符串
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.IsUrl(System.String)">
            <summary>
            是否Url字符串
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.IsIdentityCard(System.String)">
            <summary>
            是否身份证号，验证如下3种情况：
            1.身份证号码为15位数字；
            2.身份证号码为18位数字；
            3.身份证号码为17位数字+1个字母
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.IsMobileNumber(System.String,System.Boolean)">
            <summary>
            是否手机号码
            </summary>
            <param name="value"></param>
            <param name="isRestrict">是否按严格格式验证</param>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            指示指定的字符串是 null 还是 System.String.Empty 字符串
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            指示指定的字符串是 null、空还是仅由空白字符组成。
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            为指定格式的字符串填充相应对象来生成字符串
            </summary>
            <param name="format">字符串格式，占位符以{n}表示</param>
            <param name="args">用于填充占位符的参数</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.ReverseString(System.String)">
            <summary>
            将字符串反转
            </summary>
            <param name="value">要反转的字符串</param>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.IsImageFile(System.String)">
            <summary>
            判断指定路径是否图片文件
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.Split(System.String,System.String,System.Boolean)">
            <summary>
            以指定字符串作为分隔符将指定字符串分隔成数组
            </summary>
            <param name="value">要分割的字符串</param>
            <param name="strSplit">字符串类型的分隔符</param>
            <param name="removeEmptyEntries">是否移除数据中元素为空字符串的项</param>
            <returns>分割后的数据</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.ToMd5Hash(System.String)">
            <summary>
            获取字符串的MD5 Hash值
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.TextLength(System.String)">
            <summary>
            支持汉字的字符串长度，汉字长度计为2
            </summary>
            <param name="value">参数字符串</param>
            <returns>当前字符串的长度，汉字长度为2</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.FromJsonString``1(System.String)">
            <summary>
            将JSON字符串还原为对象
            </summary>
            <typeparam name="T">要转换的目标类型</typeparam>
            <param name="json">JSON字符串 </param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换为<see cref="T:System.Byte"/>[]数组，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.StringExtensions.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            将<see cref="T:System.Byte"/>[]数组转换为字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="T:OSharp.Utility.Extensions.ThreadExtensions">
            <summary>
            线程扩展操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.ThreadExtensions.CancelSleep(System.Threading.Thread)">
            <summary>
            取消Thread.Sleep状态，继续线程
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.ThreadExtensions.StartAndIgnoreAbort(System.Threading.Thread,System.Action{System.Exception})">
            <summary>
            启动线程，自动忽略停止线程时触发的<see cref="T:System.Threading.ThreadAbortException"/>异常
            </summary>
            <param name="thread">线程</param>
            <param name="failAction">引发非<see cref="T:System.Threading.ThreadAbortException"/>异常时执行的逻辑</param>
        </member>
        <member name="T:OSharp.Utility.Extensions.TryCatchExtensions">
            <summary>
            Try-Catch扩展操作
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})">
            <summary>
            对某对象执行指定功能与后续功能，并处理异常情况
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">值</param>
            <param name="action">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <param name="successAction">主功能代码成功后执行的功能代码</param>
            <returns>主功能代码是否顺利执行</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})">
            <summary>
            对某对象执行指定功能，并处理异常情况
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">值</param>
            <param name="action">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <returns>主功能代码是否顺利执行</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})">
            <summary>
            对某对象执行指定功能，并处理异常情况与返回值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="source">值</param>
            <param name="func">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <param name="successAction">主功能代码成功后执行的功能代码</param>
            <returns>功能代码的返回值，如果出现异常，则返回对象类型的默认值</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})">
            <summary>
            对某对象执行指定功能，并处理异常情况与返回值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="source">值</param>
            <param name="func">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <returns>功能代码的返回值，如果出现异常，则返回对象类型的默认值</returns>
        </member>
        <member name="T:OSharp.Utility.Extensions.TypeExtensions">
            <summary>
            类型<see cref="T:System.Type"/>辅助扩展方法类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            判断类型是否为Nullable类型
            </summary>
            <param name="type"> 要处理的类型 </param>
            <returns> 是返回True，不是返回False </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.GetNonNummableType(System.Type)">
            <summary>
            由类型的Nullable类型返回实际类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.GetUnNullableType(System.Type)">
            <summary>
            通过类型转换器获取Nullable类型的基础类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.ToDescription(System.Type,System.Boolean)">
            <summary>
            获取类型的Description特性描述信息
            </summary>
            <param name="type">类型对象</param>
            <param name="inherit">是否搜索类型的继承链以查找描述特性</param>
            <returns>返回Description特性描述信息，如不存在则返回类型的全名</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.ToDescription(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取成员元数据的Description特性描述信息
            </summary>
            <param name="member">成员元数据对象</param>
            <param name="inherit">是否搜索成员的继承链以查找描述特性</param>
            <returns>返回Description特性描述信息，如不存在则返回成员的名称</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            检查指定指定类型成员中是否存在指定的Attribute特性
            </summary>
            <typeparam name="T">要检查的Attribute特性类型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>存在返回第一个，不存在返回null</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>返回所有指定Attribute特性的数组</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            判断类型是否为集合类型
            </summary>
            <param name="type">要处理的类型</param>
            <returns>是返回True，不是返回False</returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            判断当前泛型类型是否可由指定类型的实例填充
            </summary>
            <param name="genericType">泛型类型</param>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            方法是否是异步
            </summary>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.IsBaseOn(System.Type,System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <param name="type">当前类型</param>
            <param name="baseType">要判断的基类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Extensions.TypeExtensions.IsBaseOn``1(System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <typeparam name="TBaseType">要判断的基类型</typeparam>
            <param name="type">当前类型</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Utility.Filter.PageResult`1">
            <summary>
            数据分页信息
            </summary>
        </member>
        <member name="P:OSharp.Utility.Filter.PageResult`1.Data">
            <summary>
            获取或设置 分页数据
            </summary>
        </member>
        <member name="P:OSharp.Utility.Filter.PageResult`1.Total">
            <summary>
            获取或设置 总记录数
            </summary>
        </member>
        <member name="T:OSharp.Utility.Filter.FilterGroup">
            <summary>
            筛选条件组
            </summary>
        </member>
        <member name="M:OSharp.Utility.Filter.FilterGroup.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Filter.FilterGroup"/>的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Filter.FilterGroup.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Filter.FilterGroup"/>类型的新实例
            </summary>
            <param name="operateCode">条件间操作方式的前台码</param>
        </member>
        <member name="M:OSharp.Utility.Filter.FilterGroup.#ctor(OSharp.Utility.Filter.FilterOperate)">
            <summary>
            使用操作方式初始化一个<see cref="T:OSharp.Utility.Filter.FilterGroup"/>的新实例
            </summary>
            <param name="operate">条件间操作方式</param>
        </member>
        <member name="P:OSharp.Utility.Filter.FilterGroup.Rules">
            <summary>
            获取或设置 条件集合
            </summary>
        </member>
        <member name="P:OSharp.Utility.Filter.FilterGroup.Groups">
            <summary>
            获取或设置 条件组集合
            </summary>
        </member>
        <member name="P:OSharp.Utility.Filter.FilterGroup.Operate">
            <summary>
            获取或设置 条件间操作方式，仅限And, Or
            </summary>
        </member>
        <member name="T:OSharp.Utility.Filter.FilterHelper">
            <summary>
            查询表达式辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Filter.FilterHelper.GetExpression``1(OSharp.Utility.Filter.FilterGroup)">
            <summary>
            获取指定查询条件组的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="group">查询条件组，如果为null，则直接返回 true 表达式</param>
        </member>
        <member name="M:OSharp.Utility.Filter.FilterHelper.GetExpression``1(OSharp.Utility.Filter.FilterRule)">
            <summary>
            获取指定查询条件的查询表达式
            </summary>
            <typeparam name="T">表达式实体类型</typeparam>
            <param name="rule">查询条件，如果为null，则直接返回 true 表达式</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Filter.FilterHelper.ToOperateCode(OSharp.Utility.Filter.FilterOperate)">
            <summary>
            把查询操作的枚举表示转换为操作码
            </summary>
            <param name="operate">查询操作的枚举表示</param>
        </member>
        <member name="M:OSharp.Utility.Filter.FilterHelper.GetFilterOperate(System.String)">
            <summary>
            获取操作码的查询操作枚举表示
            </summary>
            <param name="code">操作码</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Utility.Filter.FilterOperate">
            <summary>
            筛选操作方式
            </summary>
        </member>
        <member name="F:OSharp.Utility.Filter.FilterOperate.And">
            <summary>
            并且
            </summary>
        </member>
        <member name="F:OSharp.Utility.Filter.FilterOperate.Or">
            <summary>
            或者
            </summary>
        </member>
        <member name="F:OSharp.Utility.Filter.FilterOperate.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:OSharp.Utility.Filter.FilterOperate.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:OSharp.Utility.Filter.FilterOperate.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:OSharp.Utility.Filter.FilterOperate.LessOrEqual">
            <summary>
            小于或等于
            </summary>
        </member>
        <member name="F:OSharp.Utility.Filter.FilterOperate.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:OSharp.Utility.Filter.FilterOperate.GreaterOrEqual">
            <summary>
            大于或等于
            </summary>
        </member>
        <member name="F:OSharp.Utility.Filter.FilterOperate.StartsWith">
            <summary>
            以……开始
            </summary>
        </member>
        <member name="F:OSharp.Utility.Filter.FilterOperate.EndsWith">
            <summary>
            以……结束
            </summary>
        </member>
        <member name="F:OSharp.Utility.Filter.FilterOperate.Contains">
            <summary>
            包含（相似）
            </summary>
        </member>
        <member name="T:OSharp.Utility.Filter.FilterRule">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="M:OSharp.Utility.Filter.FilterRule.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Filter.FilterRule"/>的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Filter.FilterRule.#ctor(System.String,System.Object)">
            <summary>
            使用指定数据名称，数据值初始化一个<see cref="T:OSharp.Utility.Filter.FilterRule"/>的新实例
            </summary>
            <param name="field">数据名称</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:OSharp.Utility.Filter.FilterRule.#ctor(System.String,System.Object,System.String)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Filter.FilterRule"/>类型的新实例
            </summary>
            <param name="field">数据名称</param>
            <param name="value">数据值</param>
            <param name="operateCode">操作方式的前台码</param>
        </member>
        <member name="M:OSharp.Utility.Filter.FilterRule.#ctor(System.String,System.Object,OSharp.Utility.Filter.FilterOperate)">
            <summary>
            使用指定数据名称，数据值及操作方式初始化一个<see cref="T:OSharp.Utility.Filter.FilterRule"/>的新实例
            </summary>
            <param name="field">数据名称</param>
            <param name="value">数据值</param>
            <param name="operate">操作方式</param>
        </member>
        <member name="P:OSharp.Utility.Filter.FilterRule.Field">
            <summary>
            获取或设置 属性名称
            </summary>
        </member>
        <member name="P:OSharp.Utility.Filter.FilterRule.Value">
            <summary>
            获取或设置 属性值
            </summary>
        </member>
        <member name="P:OSharp.Utility.Filter.FilterRule.Operate">
            <summary>
            获取或设置 操作类型
            </summary>
        </member>
        <member name="T:OSharp.Utility.Filter.OperateCodeAttribute">
            <summary>
            表示查询操作的前台操作码
            </summary>
        </member>
        <member name="M:OSharp.Utility.Filter.OperateCodeAttribute.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Filter.OperateCodeAttribute"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Utility.Filter.OperateCodeAttribute.Code">
            <summary>
            获取 属性名称
            </summary>
        </member>
        <member name="T:OSharp.Utility.Filter.CollectionPropertySorter`1">
            <summary>
            集合类型字符串排序操作类
            </summary>
            <typeparam name="T">集合项类型</typeparam>
        </member>
        <member name="M:OSharp.Utility.Filter.CollectionPropertySorter`1.OrderBy(System.Collections.Generic.IEnumerable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Collections.Generic.IEnumerable`1"/>序列进行排序
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/>序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
        </member>
        <member name="M:OSharp.Utility.Filter.CollectionPropertySorter`1.ThenBy(System.Linq.IOrderedEnumerable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Linq.IOrderedEnumerable`1"/>进行继续排序
            </summary>
            <param name="source"><see cref="T:System.Linq.IOrderedEnumerable`1"/>序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
        </member>
        <member name="M:OSharp.Utility.Filter.CollectionPropertySorter`1.OrderBy(System.Linq.IQueryable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Linq.IQueryable`1"/>序列进行排序
            </summary>
            <param name="source">IQueryable{T}序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Filter.CollectionPropertySorter`1.ThenBy(System.Linq.IOrderedQueryable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Linq.IOrderedQueryable`1"/>序列进行排序
            </summary>
            <param name="source">IOrderedQueryable{T}序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Utility.Helper.CombHelper">
            <summary>
            COMB（<see cref="T:System.Guid"/>与<see cref="T:System.DateTime"/>混合构成的可排序<see cref="T:System.Guid"/>）类型操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.CombHelper.NewComb">
            <summary>
            返回Guid用于数据库操作，特定的时间代码可以提高检索效率
            </summary>
            <returns>COMB类型 Guid 数据</returns>
        </member>
        <member name="M:OSharp.Utility.Helper.CombHelper.GetDateFromComb(System.Guid)">
            <summary>
            从SQL Server 返回的Guid中生成时间信息
            </summary>
        </member>
        <member name="T:OSharp.Utility.Helper.DateTimeHelper">
            <summary>
            DateTime帮助类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.DateTimeHelper.GetAge(System.DateTime)">
            <summary>
            根据出生年月获取年龄
            </summary>
            <param name="birthDay">出生年月</param>
            <returns>年龄</returns>
        </member>
        <member name="M:OSharp.Utility.Helper.DateTimeHelper.GetAge(System.String)">
            <summary>
            根据出生年月获取年龄
            </summary>
            <param name="birthDay">出生年月</param>
            <returns>年龄</returns>
        </member>
        <member name="M:OSharp.Utility.Helper.DateTimeHelper.GetWeekStartTime">
            <summary>
            获取本周开始时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Helper.DateTimeHelper.GetWeekStartTime(System.DateTime)">
            <summary>
            获取指定日期所在周开始时间
            </summary>
            <param name="dt">指定时间</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Helper.DateTimeHelper.GetWeekEndTime">
            <summary>
            获取本周结束时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Helper.DateTimeHelper.GetWeekEndTime(System.DateTime)">
            <summary>
            获取指定日期所在周结束时间
            </summary>
            <param name="dt">指定时间</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Helper.DateTimeHelper.GetMonthStartTime">
            <summary>
            获取本月开始时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Helper.DateTimeHelper.GetMonthStartTime(System.DateTime)">
            <summary>
            获取指定日期所在月的开始时间
            </summary>
            <param name="dt">指定日期</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Helper.DateTimeHelper.GetMonthEndTime">
            <summary>
            获取本月结束时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Helper.DateTimeHelper.GetMonthEndTime(System.DateTime)">
            <summary>
            获取指定日期所在月的结束时间
            </summary>
            <param name="dt">指定日期</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Helper.DateTimeHelper.GetTimeStamp(System.Boolean)">
            <summary>  
            获取当前时间戳  
            </summary>  
            <param name="bflag">为真时获取10位时间戳,为假时获取13位时间戳.</param>  
            <returns></returns>  
        </member>
        <member name="T:OSharp.Utility.Helper.RequestMethod">
            <summary>
            网页请求枚举
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.GetRequestHelper.GetWebRequest(System.String,OSharp.Utility.Helper.RequestMethod,System.String,System.Text.Encoding,System.Net.WebHeaderCollection)">
            <summary>
            网页请求
            </summary>
            <param name="postUrl">URL</param>
            <param name="requestMethod">请求方法</param>
            <param name="param">请求参数</param>
            <param name="encoding">编码</param>
            <param name="headers">头部</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Helper.HtmlHelper.NoHtml(System.String)">
            <summary>
            去除HTML标记
            </summary>
            <param name="Htmlstring">包括HTML的源码</param>
            <returns>已经去除后的文字</returns>
        </member>
        <member name="T:OSharp.Utility.Helper.ImageHelper">
            <summary>  
            图片处理类  
            </summary>  
        </member>
        <member name="M:OSharp.Utility.Helper.ImageHelper.GetThumbnail(System.String,System.Int32,System.Int32)">
            <summary>
            获取缩略图
            </summary>
            <param name="path">图片路径</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <returns>缩略图</returns>
        </member>
        <member name="M:OSharp.Utility.Helper.ImageHelper.GetThumbnail(System.String,System.Int32)">
            <summary>
            按比例获取缩略图
            </summary>
            <param name="path">图片路径</param>
            <param name="percent">比例，基数100</param>
            <returns>缩略图</returns>
        </member>
        <member name="M:OSharp.Utility.Helper.ImageHelper.GetThumbnailKeepRatio(System.String,System.Int32,System.Int32)">
            <summary>
            生成缩略图，并保持纵横比
            </summary>
            <param name="path">图片路径</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <returns>生成缩略图后对象</returns>
        </member>
        <member name="M:OSharp.Utility.Helper.ImageHelper.GetImageSize(System.Drawing.Image,System.Int32)">
            <summary>
            根据百分比获取图片的尺寸
            </summary>
            <param name="picture">图片</param>
            <param name="percent">比例，基数100</param>
            <returns>图片尺寸</returns>
        </member>
        <member name="M:OSharp.Utility.Helper.ImageHelper.GetImageSize(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            根据设定的大小返回图片的大小，考虑图片长宽的比例问题
            </summary>
            <param name="picture">图片</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <returns>图片尺寸</returns>
        </member>
        <member name="M:OSharp.Utility.Helper.ImageHelper.GetCodecInfo(System.String)">
            <summary>
            获取图像编码解码器的所有相关信息
            </summary>
            <param name="mimeType">包含编码解码器的多用途网际邮件扩充协议 (MIME) 类型的字符串</param>
            <returns>返回图像编码解码器的所有相关信息</returns>
        </member>
        <member name="M:OSharp.Utility.Helper.ImageHelper.GetImageCodecInfo(System.Drawing.Imaging.ImageFormat)">
            <summary>
            xx
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Helper.ImageHelper.SaveImage(System.Drawing.Image,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            保存图片
            </summary>
            <param name="image">图片</param>
            <param name="savePath">保存地址</param>
            <param name="format"></param>
        </member>
        <member name="M:OSharp.Utility.Helper.ImageHelper.SaveImage(System.Drawing.Image,System.String,System.Drawing.Imaging.ImageCodecInfo)">
            <summary>
            高质量保存图片
            </summary>
        </member>
        <member name="T:OSharp.Utility.Helper.JsonHelper">
            <summary>
            JSON辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.JsonHelper.JsonDateTimeFormat(System.String)">
            <summary>
            处理Json的时间格式为正常格式
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.JsonHelper.ToJson(System.Object)">
            <summary>
            把对象序列化成Json字符串格式
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Helper.JsonHelper.FromJson``1(System.String)">
            <summary>
            把Json字符串转换为强类型对象
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.LatLngHelper.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            获取两个经纬度之间的距离
            </summary>
            <param name="lat1">坐标1的纬度</param>
            <param name="lng1">坐标1的经度</param>
            <param name="lat2">坐标2的纬度</param>
            <param name="lng2">坐标2的经度</param>
            <returns>距离</returns>
        </member>
        <member name="T:OSharp.Utility.Helper.MathHelper">
            <summary>
            数据计算辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.MathHelper.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            获取两个坐标的距离
            </summary>
        </member>
        <member name="T:OSharp.Utility.Helper.RetryHelper">
            <summary>
            重试操作辅助类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.RetryHelper.Retry(System.Func{System.Boolean},System.Int32)">
            <summary>
            重试
            </summary>
            <param name="func">重试方法</param>
            <param name="times">重试次数</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="T:OSharp.Utility.Helper.SerializeHelper">
            <summary>
            序列化辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.SerializeHelper.ToBinary(System.Object)">
            <summary>
            将数据序列化为二进制数组
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.SerializeHelper.FromBinary``1(System.Byte[])">
            <summary>
            将二进制数组反序列化为强类型数据
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.SerializeHelper.ToBinaryFile(System.Object,System.String)">
            <summary>
            将数据序列化为二进制数组并写入文件中
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.SerializeHelper.FromBinaryFile``1(System.String)">
            <summary>
            将指定二进制数据文件还原为强类型数据
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.SerializeHelper.ToXml(System.Object)">
            <summary>
            将数据序列化为XML形式
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.SerializeHelper.FromXml``1(System.String)">
            <summary>
            将XML数据反序列化为强类型
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.SerializeHelper.ToXmlFile(System.Object,System.String)">
            <summary>
            将数据序列化为XML并写入文件
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.SerializeHelper.FromXmlFile``1(System.String)">
            <summary>
            将指定XML数据文件还原为强类型数据
            </summary>
        </member>
        <member name="M:OSharp.Utility.Helper.StringHelper.GetLowerChineseSpell(System.String)">
            <summary>  
            把提取的字母变成小写  
            </summary>  
            <param name="strText">需要转换的字符串</param>  
            <returns>转换结果</returns>  
        </member>
        <member name="M:OSharp.Utility.Helper.StringHelper.GetUpperChineseSpell(System.String)">
            <summary>  
            把提取的字母变成大写  
            </summary>  
            <param name="strText">需要转换的字符串</param>  
            <returns>转换结果</returns>  
        </member>
        <member name="M:OSharp.Utility.Helper.StringHelper.GetChineseSpell(System.String)">
            <summary>
            获取汉字的拼音字符串
            </summary>
            <param name="chStr">汉字字符串</param>
            <returns>拼音字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Helper.StringHelper.GetHeadSpell(System.String)">
            <summary>  
            获取单个汉字的首拼音  
            </summary>  
            <param name="strText">需要转换的字符</param>  
            <returns>转换结果</returns>  
        </member>
        <member name="T:OSharp.Utility.Net.Mail.MailSender">
            <summary>
            邮件发送者
            </summary>
        </member>
        <member name="M:OSharp.Utility.Net.Mail.MailSender.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
             构造函数
            </summary>
            <param name="server">发件箱的邮件服务器地址</param>
            <param name="toMail">收件人地址（可以是多个收件人，程序中是以“;"进行区分的）</param>
            <param name="fromMail">发件人地址</param>
            <param name="subject">邮件标题</param>
            <param name="emailBody">邮件内容（可以以html格式进行设计）</param>
            <param name="username">发件箱的用户名（即@符号前面的字符串，例如：hello@163.com，用户名为：hello）</param>
            <param name="password">发件人邮箱密码</param>
            <param name="port">发送邮件所用的端口号（htmp协议默认为25）</param>
            <param name="sslEnable">true表示对邮件内容进行socket层加密传输，false表示不加密</param>
            <param name="pwdCheckEnable">true表示对发件人邮箱进行密码验证，false表示不对发件人邮箱进行密码验证</param>
        </member>
        <member name="M:OSharp.Utility.Net.Mail.MailSender.AddAttachments(System.String)">
            <summary>
             添加附件
            </summary>
            <param name="attachmentsPath">附件的路径集合，以分号分隔</param>
        </member>
        <member name="M:OSharp.Utility.Net.Mail.MailSender.Send">
            <summary>
             邮件的发送
            </summary>
        </member>
        <member name="T:OSharp.Utility.Net.IpLocation">
            <summary>
            IPÎ»ÖÃÐÅÏ¢Àà
            </summary>
        </member>
        <member name="P:OSharp.Utility.Net.IpLocation.Ip">
            <summary>
            IPµØÖ·
            </summary>
        </member>
        <member name="P:OSharp.Utility.Net.IpLocation.Country">
            <summary>
            IPµØÖ·ËùÊô¹ú¼Ò
            </summary>
        </member>
        <member name="P:OSharp.Utility.Net.IpLocation.Local">
            <summary>
            Î»ÖÃÐÅÏ¢
            </summary>
        </member>
        <member name="T:OSharp.Utility.Net.IpLocator">
            <summary>
            IP位置查找操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Net.IpLocator.#ctor(System.String)">
            <summary>
            初始化一个IP位置查找操作类的实例
            </summary>
            <param name="dataPath"> IP信息数据文件路径 </param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:OSharp.Utility.Net.IpLocator.Count">
            <summary>
            数据文件中信息数量
            </summary>
        </member>
        <member name="M:OSharp.Utility.Net.IpLocator.IpToInt(System.String)">
            <summary>
            IP地址转化成整数
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Net.IpLocator.IntToIp(System.Int64)">
            <summary>
            IP地址从整数类型转化为正常IP类型
            </summary>
            <param name="ipInt"></param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Net.IpLocator.Query(System.String)">
            <summary>
            由IP地址查找对应的位置信息
            </summary>
            <param name="ip"> 要查找的IP地址 </param>
            <returns> </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:OSharp.Utility.Net.IpLocator.Query2(System.String)">
            <summary>
            由IP地址查找对应的位置信息的字符串
            </summary>
        </member>
        <member name="M:OSharp.Utility.Net.IpLocator.GetCountry(System.Int64,System.Int32,System.String@)">
            <summary>
            Gets the country.
            </summary>
            <param name="endIpOff"> The end ip off. </param>
            <param name="countryFlag"> The country flag. </param>
            <param name="local"> The local. </param>
            <returns> country </returns>
        </member>
        <member name="T:OSharp.Utility.Office.ExcelHandler">
            <summary>
            Excel操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Office.ExcelHandler.OutputToExcel(System.Data.DataTable)">
            <summary>
            将数据导出至Excel文件
            </summary>
            <param name="table">DataTable对象</param>
        </member>
        <member name="M:OSharp.Utility.Office.ExcelHandler.OutputToExcel(System.Data.DataTable,System.Collections.ArrayList)">
            <summary>
            将数据导出至Excel文件
            </summary>
            <param name="table">DataTable对象</param>
            <param name="columns">要导出的数据列集合</param>
        </member>
        <member name="M:OSharp.Utility.Office.ExcelHandler.GetExcelTables">
            <summary>
            获取Excel文件数据表列表
            </summary>
        </member>
        <member name="M:OSharp.Utility.Office.ExcelHandler.InputFromExcel(System.String)">
            <summary>
            将Excel文件导出至DataTable(第一行作为表头)
            </summary>
            <param name="tableName">数据表名，如果数据表名错误，默认为第一个数据表名</param>
        </member>
        <member name="M:OSharp.Utility.Office.ExcelHandler.GetExcelTableColumns(System.String)">
            <summary>
            获取Excel文件指定数据表的数据列表
            </summary>
            <param name="tableName">数据表名</param>
        </member>
        <member name="T:OSharp.Utility.Reflection.FastInvokeHandler">
            <summary>
            快速执行处理器
            </summary>
        </member>
        <member name="M:OSharp.Utility.Reflection.FastInvokeHandler.Create(System.Reflection.MethodInfo)">
            <summary>
            创建方法的快速处理封装
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Utility.Exceptions.ExceptionMessage">
            <summary>
            异常信息封装类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Exceptions.ExceptionMessage.#ctor(System.Exception,System.String,System.Boolean)">
            <summary>
            以自定义用户信息和异常对象实例化一个异常信息对象
            </summary>
            <param name="e">异常对象</param>
            <param name="userMessage">自定义用户信息</param>
            <param name="isHideStackTrace">是否隐藏异常堆栈信息</param>
        </member>
        <member name="P:OSharp.Utility.Exceptions.ExceptionMessage.UserMessage">
            <summary>
            用户信息，用于报告给用户的异常消息
            </summary>
        </member>
        <member name="P:OSharp.Utility.Exceptions.ExceptionMessage.ExMessage">
            <summary>
            直接的Exception异常信息，即e.Message属性值
            </summary>
        </member>
        <member name="P:OSharp.Utility.Exceptions.ExceptionMessage.ErrorDetails">
            <summary>
            异常输出的详细描述，包含异常消息，规模信息，异常类型，异常源，引发异常的方法及内部异常信息
            </summary>
        </member>
        <member name="M:OSharp.Utility.Exceptions.ExceptionMessage.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:OSharp.Utility.Exceptions.OSharpException">
            <summary>
            OSharp框架异常类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Exceptions.OSharpException.#ctor">
            <summary>
            初始化<see cref="T:OSharp.Utility.Exceptions.OSharpException"/>类的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Exceptions.OSharpException.#ctor(System.String)">
            <summary>
            使用指定错误消息初始化<see cref="T:OSharp.Utility.Exceptions.OSharpException"/>类的新实例。
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:OSharp.Utility.Exceptions.OSharpException.#ctor(System.String,System.Exception)">
            <summary>
            使用异常消息与一个内部异常实例化一个<see cref="T:OSharp.Utility.Exceptions.OSharpException"/>类的新实例
            </summary>
            <param name="message">异常消息</param>
            <param name="inner">用于封装在<see cref="T:OSharp.Utility.Exceptions.OSharpException"/>内部的异常实例</param>
        </member>
        <member name="M:OSharp.Utility.Exceptions.OSharpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用可序列化数据实例化一个<see cref="T:OSharp.Utility.Exceptions.OSharpException"/>类的新实例
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
        </member>
        <member name="T:OSharp.Utility.ParamterCheckExtensions">
            <summary>
            用于参数检查的扩展方法
            </summary>
        </member>
        <member name="M:OSharp.Utility.ParamterCheckExtensions.Require``1(System.Boolean,System.String)">
            <summary>
            验证指定值的断言<paramref name="assertion"/>是否为真，如果不为真，抛出指定消息<paramref name="message"/>的指定类型<typeparamref name="TException"/>异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="assertion">要验证的断言。</param>
            <param name="message">异常消息。</param>
        </member>
        <member name="M:OSharp.Utility.ParamterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为值抛出<see cref="T:System.Exception"/>异常
            </summary>
            <param name="value"></param>
            <param name="assertionFunc">要验证的断言表达式</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:OSharp.Utility.ParamterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为真抛出<see cref="!:TException"/>异常
            </summary>
            <typeparam name="T">要判断的值的类型</typeparam>
            <typeparam name="TException">抛出的异常类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言表达式</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:OSharp.Utility.ParamterCheckExtensions.CheckNotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，否则抛出<see cref="T:System.ArgumentNullException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:OSharp.Utility.ParamterCheckExtensions.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            检查字符串不能为空引用或空字符串，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:OSharp.Utility.ParamterCheckExtensions.CheckNotEmpty(System.Guid,System.String)">
            <summary>
            检查Guid值不能为Guid.Empty，否则抛出<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:OSharp.Utility.ParamterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            检查集合不能为空引用或空集合，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T">集合项的类型。</typeparam>
            <param name="collection"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:OSharp.Utility.ParamterCheckExtensions.CheckLessThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须小于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="target">要比较的值。</param>
            <param name="canEqual">是否可等于。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:OSharp.Utility.ParamterCheckExtensions.CheckGreaterThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须大于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="target">要比较的值。</param>
            <param name="canEqual">是否可等于。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:OSharp.Utility.ParamterCheckExtensions.CheckBetween``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            检查参数必须在指定范围之间，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="start">比较范围的起始值。</param>
            <param name="end">比较范围的结束值。</param>
            <param name="startEqual">是否可等于起始值</param>
            <param name="endEqual">是否可等于结束值</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:OSharp.Utility.ParamterCheckExtensions.CheckDirectoryExists(System.String,System.String)">
            <summary>
            检查指定路径的文件夹必须存在，否则抛出<see cref="T:System.IO.DirectoryNotFoundException"/>异常。
            </summary>
            <param name="directory"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:OSharp.Utility.ParamterCheckExtensions.CheckFileExists(System.String,System.String)">
            <summary>
            检查指定路径的文件必须存在，否则抛出<see cref="T:System.IO.FileNotFoundException"/>异常。
            </summary>
            <param name="filename"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException">当文件路径为null时</exception>
            <exception cref="T:System.IO.FileNotFoundException">当文件路径不存在时</exception>
        </member>
        <member name="T:OSharp.Utility.IO.DirectoryHelper">
            <summary>
            目录操作辅助类
            </summary>
        </member>
        <member name="M:OSharp.Utility.IO.DirectoryHelper.Copy(System.String,System.String,System.String[])">
            <summary>
            递归复制文件夹及文件夹/文件
            </summary>
            <param name="sourcePath"> 源文件夹路径 </param>
            <param name="targetPath"> 目的文件夹路径 </param>
            <param name="searchPatterns"> 要复制的文件扩展名数组 </param>
        </member>
        <member name="M:OSharp.Utility.IO.DirectoryHelper.Delete(System.String,System.Boolean)">
            <summary>
            递归删除目录
            </summary>
            <param name="directory"> 目录路径 </param>
            <param name="isDeleteRoot"> 是否删除根目录 </param>
            <returns> 是否成功 </returns>
        </member>
        <member name="M:OSharp.Utility.IO.DirectoryHelper.SetAttributes(System.String,System.IO.FileAttributes,System.Boolean)">
            <summary>
            设置或取消目录的<see cref="T:System.IO.FileAttributes"/>属性。
            </summary>
            <param name="directory">目录路径</param>
            <param name="attribute">要设置的目录属性</param>
            <param name="isSet">true为设置，false为取消</param>
        </member>
        <member name="T:OSharp.Utility.IO.FileHelper">
            <summary>
            文件辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.IO.FileHelper.Delete(System.String,System.Boolean)">
            <summary>
            删除文件（到回收站[可选]）
            </summary>
            <param name="filename">要删除的文件名</param>
            <param name="isSendToRecycleBin">是否删除到回收站</param>
        </member>
        <member name="M:OSharp.Utility.IO.FileHelper.SetAttribute(System.String,System.IO.FileAttributes,System.Boolean)">
            <summary>
            设置或取消文件的指定<see cref="T:System.IO.FileAttributes"/>属性
            </summary>
            <param name="fileName">文件名</param>
            <param name="attribute">要设置的文件属性</param>
            <param name="isSet">true为设置，false为取消</param>
        </member>
        <member name="M:OSharp.Utility.IO.FileHelper.GetVersion(System.String)">
            <summary>
            获取文件版本号
            </summary>
            <param name="fileName"> 完整文件名 </param>
            <returns> 文件版本号 </returns>
        </member>
        <member name="M:OSharp.Utility.IO.FileHelper.GetFileMd5(System.String)">
            <summary>
            获取文件的MD5值
            </summary>
            <param name="fileName"> 文件名 </param>
            <returns> 32位MD5 </returns>
        </member>
        <member name="T:OSharp.Utility.Logging.LoggerAdapterBase">
            <summary>
            按名称缓存的日志实现适配器基类，用于创建并管理指定类型的日志实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.LoggerAdapterBase.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Logging.LoggerAdapterBase"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.LoggerAdapterBase.GetLogger(System.Type)">
            <summary>
            由指定类型获取<see cref="T:OSharp.Utility.Logging.ILog"/>日志实例
            </summary>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Logging.LoggerAdapterBase.GetLogger(System.String)">
            <summary>
            由指定名称获取<see cref="T:OSharp.Utility.Logging.ILog"/>日志实例
            </summary>
            <param name="name">指定名称</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Logging.LoggerAdapterBase.CreateLogger(System.String)">
            <summary>
            创建指定名称的缓存实例
            </summary>
            <param name="name">指定名称</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Logging.LoggerAdapterBase.ClearLoggerCache">
            <summary>
            清除缓存中的日志实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.LoggerAdapterBase.GetLoggerInternal(System.String)">
            <summary>
            获取指定名称的Logger实例
            </summary>
            <param name="name">指定名称</param>
            <returns>日志实例</returns>
            <exception cref="T:System.NotSupportedException">指定名称的日志缓存实例不存在则返回异常<see cref="T:System.NotSupportedException"/></exception>
        </member>
        <member name="T:OSharp.Utility.Logging.ILog">
            <summary>
            表示日志实例的接口
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.ILog.IsDataLogging">
            <summary>
            获取 是否数据日志对象
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.ILog.IsTraceEnabled">
            <summary>
            获取 是否允许<see cref="F:OSharp.Utility.Logging.LogLevel.Trace"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.ILog.IsDebugEnabled">
            <summary>
            获取 是否允许<see cref="F:OSharp.Utility.Logging.LogLevel.Debug"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.ILog.IsInfoEnabled">
            <summary>
            获取 是否允许<see cref="F:OSharp.Utility.Logging.LogLevel.Info"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.ILog.IsWarnEnabled">
            <summary>
            获取 是否允许<see cref="F:OSharp.Utility.Logging.LogLevel.Warn"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.ILog.IsErrorEnabled">
            <summary>
            获取 是否允许<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.ILog.IsFatalEnabled">
            <summary>
            获取 是否允许<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>级别的日志
            </summary>
        </member>
        <member name="T:OSharp.Utility.Logging.ILogger">
            <summary>
            定义日志记录行为
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Trace``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Trace"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Trace(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Trace"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Debug``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Debug"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Debug(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Debug"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Info``1(``0,System.Boolean)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Info"/>日志消息
            </summary>
            <param name="message">日志消息</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Info(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Info"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Warn``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Warn"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Warn(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Warn"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Error``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Error(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Error``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>日志消息，并记录异常
            </summary>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Error(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Fatal``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Fatal``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>日志消息，并记录异常
            </summary>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:OSharp.Utility.Logging.ILogger.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="T:OSharp.Utility.Logging.ILoggerAdapter">
            <summary>
            定义日志输出适配器的方法
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.ILoggerAdapter.GetLogger(System.Type)">
            <summary>
            由指定类型获取<see cref="T:OSharp.Utility.Logging.ILog"/>日志实例
            </summary>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Logging.ILoggerAdapter.GetLogger(System.String)">
            <summary>
            由指定名称获取<see cref="T:OSharp.Utility.Logging.ILog"/>日志实例
            </summary>
            <param name="name">指定名称</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Utility.Logging.LogBase">
            <summary>
            日志输出者适配基类，用于定义日志输出的处理业务
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Write(OSharp.Utility.Logging.LogLevel,System.Object,System.Exception,System.Boolean)">
            <summary>
            获取日志输出处理委托实例
            </summary>
            <param name="level">日志输出级别</param>
            <param name="message">日志消息</param>
            <param name="exception">日志异常</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="P:OSharp.Utility.Logging.LogBase.IsDataLogging">
            <summary>
            获取 是否数据日志对象
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.LogBase.IsTraceEnabled">
            <summary>
            获取 是否允许输出<see cref="F:OSharp.Utility.Logging.LogLevel.Trace"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.LogBase.IsDebugEnabled">
            <summary>
            获取 是否允许输出<see cref="F:OSharp.Utility.Logging.LogLevel.Debug"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.LogBase.IsInfoEnabled">
            <summary>
            获取 是否允许输出<see cref="F:OSharp.Utility.Logging.LogLevel.Info"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.LogBase.IsWarnEnabled">
            <summary>
            获取 是否允许输出<see cref="F:OSharp.Utility.Logging.LogLevel.Warn"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.LogBase.IsErrorEnabled">
            <summary>
            获取 是否允许输出<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.LogBase.IsFatalEnabled">
            <summary>
            获取 是否允许输出<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>级别的日志
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Trace``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Trace"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Trace(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Trace"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Debug``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Debug"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Debug(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Debug"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Info``1(``0,System.Boolean)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Info"/>日志消息
            </summary>
            <param name="message">日志消息</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Info(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Info"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Warn``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Warn"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Warn(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Warn"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Error``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Error(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Error``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>日志消息，并记录异常
            </summary>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Error(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Fatal``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Fatal(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Fatal``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>日志消息，并记录异常
            </summary>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogBase.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="T:OSharp.Utility.Logging.InternalLogger">
            <summary>
            日志记录者，日志记录输入端
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.#ctor(System.Type)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Logging.InternalLogger"/>新实例
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Logging.InternalLogger"/>新实例
            </summary>
            <param name="name">指定名称</param>
        </member>
        <member name="P:OSharp.Utility.Logging.InternalLogger.EntryEnabled">
            <summary>
            获取或设置 是否允许记录日志，如为 false，将完全禁止日志记录
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.InternalLogger.EntryLogLevel">
            <summary>
            获取或设置 日志级别的入口控制，级别决定是否执行相应级别的日志记录功能
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Trace``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Trace"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Trace(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Trace"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Debug``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Debug"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Debug(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Debug"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Info``1(``0,System.Boolean)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Info"/>日志消息
            </summary>
            <param name="message">日志消息</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Info(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Info"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Warn``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Warn"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Warn(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Warn"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Error``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Error(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Error``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>日志消息，并记录异常
            </summary>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Error(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Error"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Fatal``1(``0)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>日志消息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Fatal(System.String,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Fatal``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>日志消息，并记录异常
            </summary>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:OSharp.Utility.Logging.InternalLogger.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:OSharp.Utility.Logging.LogLevel.Fatal"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="T:OSharp.Utility.Logging.LogLevel">
            <summary>
            表示日志输出级别的枚举
            </summary>
        </member>
        <member name="F:OSharp.Utility.Logging.LogLevel.All">
            <summary>
            输出所有级别的日志
            </summary>
        </member>
        <member name="F:OSharp.Utility.Logging.LogLevel.Trace">
            <summary>
            表示跟踪的日志级别
            </summary>
        </member>
        <member name="F:OSharp.Utility.Logging.LogLevel.Debug">
            <summary>
            表示调试的日志级别
            </summary>
        </member>
        <member name="F:OSharp.Utility.Logging.LogLevel.Info">
            <summary>
            表示消息的日志级别
            </summary>
        </member>
        <member name="F:OSharp.Utility.Logging.LogLevel.Warn">
            <summary>
            表示警告的日志级别
            </summary>
        </member>
        <member name="F:OSharp.Utility.Logging.LogLevel.Error">
            <summary>
            表示错误的日志级别
            </summary>
        </member>
        <member name="F:OSharp.Utility.Logging.LogLevel.Fatal">
            <summary>
            表示严重错误的日志级别
            </summary>
        </member>
        <member name="F:OSharp.Utility.Logging.LogLevel.Off">
            <summary>
            关闭所有日志，不输出日志
            </summary>
        </member>
        <member name="T:OSharp.Utility.Logging.LogManager">
            <summary>
            日志管理器
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.LogManager.#cctor">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Logging.LogManager"/>实例
            </summary>
        </member>
        <member name="P:OSharp.Utility.Logging.LogManager.Adapters">
            <summary>
            获取 日志适配器集合
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.LogManager.AddLoggerAdapter(OSharp.Utility.Logging.ILoggerAdapter)">
            <summary>
            添加日志适配器
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.LogManager.RemoveLoggerAdapter(OSharp.Utility.Logging.ILoggerAdapter)">
            <summary>
            移除日志适配器
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.LogManager.SetEntryInfo(System.Boolean,OSharp.Utility.Logging.LogLevel)">
            <summary>
            设置日志记录入口参数
            </summary>
            <param name="enabled">是否允许记录日志，如为 false，将完全禁止日志记录</param>
            <param name="entryLevel">日志级别的入口控制，级别决定是否执行相应级别的日志记录功能</param>
        </member>
        <member name="M:OSharp.Utility.Logging.LogManager.GetLogger(System.String)">
            <summary>
            获取日志记录者实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            获取指定类型的日志记录实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Logging.LogManager.GetLogger``1">
            <summary>
            获取指定类型的日志记录实例
            </summary>
        </member>
        <member name="T:OSharp.Utility.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.AnyRadixConvert_CharacterIsNotValid">
            <summary>
              Looks up a localized string similar to 参数中的字符\&quot;{0}\&quot;不是 {1} 进制数的有效字符。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.AnyRadixConvert_Overflow">
            <summary>
              Looks up a localized string similar to 0.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.Filter_GroupOperateError">
            <summary>
              Looks up a localized string similar to 查询条件组中的操作类型错误，只能为And或者Or。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.Filter_RuleFieldInTypeNotFound">
            <summary>
              Looks up a localized string similar to 指定的属性“{0}”在类型“{1}”中不存在。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.Logging_CreateLogInstanceReturnNull">
            <summary>
              Looks up a localized string similar to 创建名称为“{0}”的日志实例时“{1}”返回空实例。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.Mef_HttpContextItems_NotFoundRequestContainer">
            <summary>
              Looks up a localized string similar to 当前Http上下文中不存在Request有效范围的Mef部件容器。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ObjectExtensions_PropertyNameNotExistsInType">
            <summary>
              Looks up a localized string similar to 指定对象中不存在名称为“{0}”的属性。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ObjectExtensions_PropertyNameNotFixedType">
            <summary>
              Looks up a localized string similar to 指定名称“{0}”的属性类型不是“{1}”。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ParameterCheck_Between">
            <summary>
              Looks up a localized string similar to 参数“{0}”的值必须在“{1}”与“{2}”之间。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ParameterCheck_BetweenNotEqual">
            <summary>
              Looks up a localized string similar to 参数“{0}”的值必须在“{1}”与“{2}”之间，且不能等于“{3}”。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ParameterCheck_DirectoryNotExists">
            <summary>
              Looks up a localized string similar to 指定的目录路径“{0}”不存在。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ParameterCheck_FileNotExists">
            <summary>
              Looks up a localized string similar to 指定的文件路径“{0}”不存在。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ParameterCheck_NotEmpty_Guid">
            <summary>
              Looks up a localized string similar to 参数“{0}”的值不能为Guid.Empty.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ParameterCheck_NotGreaterThan">
            <summary>
              Looks up a localized string similar to 参数“{0}”的值必须大于“{1}”。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ParameterCheck_NotGreaterThanOrEqual">
            <summary>
              Looks up a localized string similar to 参数“{0}”的值必须大于或等于“{1}”。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ParameterCheck_NotLessThan">
            <summary>
              Looks up a localized string similar to 参数“{0}”的值必须小于“{1}”。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ParameterCheck_NotLessThanOrEqual">
            <summary>
              Looks up a localized string similar to 参数“{0}”的值必须小于或等于“{1}”。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ParameterCheck_NotNull">
            <summary>
              Looks up a localized string similar to 参数“{0}”不能为空引用。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ParameterCheck_NotNullOrEmpty_Collection">
            <summary>
              Looks up a localized string similar to 参数“{0}”不能为空引用或空集合。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.ParameterCheck_NotNullOrEmpty_String">
            <summary>
              Looks up a localized string similar to 参数“{0}”不能为空引用或空字符串。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.Security_DES_KeyLenght">
            <summary>
              Looks up a localized string similar to 参数key的长度必须为8或24，当前为{0}。.
            </summary>
        </member>
        <member name="P:OSharp.Utility.Properties.Resources.Security_RSA_Sign_HashType">
            <summary>
              Looks up a localized string similar to 参数hashType必须为MD5或SHA1.
            </summary>
        </member>
        <member name="T:OSharp.Utility.Secutiry.CommunicationCryptor">
            <summary>
            结合RSA，DES的通信加密解密操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.CommunicationCryptor.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Secutiry.CommunicationCryptor"/>类型的新实例
            </summary>
            <param name="ownPrivateKey">己方私钥</param>
            <param name="facePublicKey">对方公钥</param>
            <param name="hashType">摘要哈希方式，值必须为MD5或SHA1</param>
        </member>
        <member name="M:OSharp.Utility.Secutiry.CommunicationCryptor.DecryptAndVerifyData(System.String)">
            <summary>
            解密接收到的加密数据并验证完整性，如果验证通过返回明文
            </summary>
            <param name="data">接收到的加密数据</param>
            <returns>解密并验证成功后，返回明文</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.CommunicationCryptor.EncryptData(System.String)">
            <summary>
            加密要发送的数据，包含签名，DES加密，RSA加密DES密钥等步骤
            </summary>
            <param name="data">要加密的正文明文数据</param>
            <returns>已加密待发送的密文</returns>
        </member>
        <member name="T:OSharp.Utility.Secutiry.DesHelper">
            <summary>
            DES / TripleDES加密解密操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.#ctor(System.Boolean)">
            <summary>
            使用随机密码初始化一个<see cref="T:OSharp.Utility.Secutiry.DesHelper"/>类的新实例
            </summary>
            <param name="isTriple">是否使用TripleDES方式，否则为DES方式</param>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.#ctor(System.Byte[])">
            <summary>
            使用指定8位或24位密码初始化一个<see cref="T:OSharp.Utility.Secutiry.DesHelper"/>类的新实例
            </summary>
        </member>
        <member name="P:OSharp.Utility.Secutiry.DesHelper.Key">
            <summary>
            获取 密钥
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.Encrypt(System.Byte[])">
            <summary>
            加密字节数组
            </summary>
            <param name="source">要加密的字节数组</param>
            <returns>加密后的字节数组</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.Decrypt(System.Byte[])">
            <summary>
            解密字节数组
            </summary>
            <param name="source">要解密的字节数组</param>
            <returns>解密后的字节数组</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.Encrypt(System.String)">
            <summary>
            加密字符串，输出BASE64编码字符串
            </summary>
            <param name="source">要加密的明文字符串</param>
            <returns>加密的BASE64编码的字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.Decrypt(System.String)">
            <summary>
            解密字符串，输入为BASE64编码字符串
            </summary>
            <param name="source">要解密的BASE64编码的字符串</param>
            <returns>明文字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.EncryptFile(System.String,System.String)">
            <summary>
            整体加密文件
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.EncryptFile(System.String,System.String,System.Int32)">
            <summary>
            分段加密文件
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
            <param name="sectionLength">分段大小（字节）</param>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.DecryptFile(System.String,System.String)">
            <summary>
            对文件内容进行DES解密，能自动识别并处理是否为分段加密
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            加密字节数组
            </summary>
            <param name="source">要加密的字节数组</param>
            <param name="key">密钥字节数组，长度为8或者24</param>
            <returns>加密后的字节数组</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            解密字节数组
            </summary>
            <param name="source">要解密的字节数组</param>
            <param name="key">密钥字节数组，长度为8或者24</param>
            <returns>解密后的字节数组</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.Encrypt(System.String,System.String)">
            <summary>
            加密字符串，输出BASE64编码字符串
            </summary>
            <param name="source">要加密的明文字符串</param>
            <param name="key">密钥字符串，长度为8或者24</param>
            <returns>加密的BASE64编码的字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.Decrypt(System.String,System.String)">
            <summary>
            解密字符串，输入BASE64编码字符串
            </summary>
            <param name="source">要解密的BASE64编码字符串</param>
            <param name="key">密钥字符串，长度为8或者24</param>
            <returns>解密的明文字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.EncryptFile(System.String,System.String,System.String)">
            <summary>
            整体加密文件
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
            <param name="key">密钥字符串，长度为8或者24</param>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.EncryptFile(System.String,System.String,System.Int32,System.String)">
            <summary>
            分段加密文件
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
            <param name="sectionLength">分段大小（字节）</param>
            <param name="key">密钥字符串，长度为8或者24</param>
        </member>
        <member name="M:OSharp.Utility.Secutiry.DesHelper.DecryptFile(System.String,System.String,System.String)">
            <summary>
            对文件内容进行DES解密，能自动识别并处理是否为分段加密
            </summary>
            <param name="sourceFile">待加密的文件名</param>
            <param name="targetFile">保存加密文件名</param>
            <param name="key">密钥字符串，长度为8或者24</param>
        </member>
        <member name="T:OSharp.Utility.Secutiry.HashHelper">
            <summary>
            字符串Hash操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.HashHelper.GetMd5(System.String,System.Text.Encoding)">
            <summary>
            获取字符串的MD5哈希值
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.HashHelper.GetMd5(System.Byte[])">
            <summary>
            获取字节数组的MD5哈希值
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.HashHelper.GetSha1(System.String)">
            <summary>
            获取字符串的SHA1哈希值
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.HashHelper.GetSha256(System.String)">
            <summary>
            获取字符串的Sha256哈希值
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.HashHelper.GetSha512(System.String)">
            <summary>
            获取字符串的Sha512哈希值
            </summary>
        </member>
        <member name="T:OSharp.Utility.Secutiry.RsaHelper">
            <summary>
            RSA加密解密操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Utility.Secutiry.RsaHelper"/>类的新实例
            </summary>
        </member>
        <member name="P:OSharp.Utility.Secutiry.RsaHelper.PublicKey">
            <summary>
            获取 公钥
            </summary>
        </member>
        <member name="P:OSharp.Utility.Secutiry.RsaHelper.PrivateKey">
            <summary>
            获取 私钥
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.Encrypt(System.Byte[])">
            <summary>
            加密字节数组
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.Decrypt(System.Byte[])">
            <summary>
            解密字节数组
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.SignData(System.Byte[],System.String)">
            <summary>
            对明文进行签名，返回明文签名的字节数组
            </summary>
            <param name="source">要签名的明文字节数组</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <returns>明文签名的字节数组</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.VerifyData(System.Byte[],System.Byte[],System.String)">
            <summary>
            验证解密得到的明文是否符合签名
            </summary>
            <param name="source">解密的明文字节数组</param>
            <param name="signData">明文签名字节数组</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.Decrypt(System.String)">
            <summary>
            解密字符串
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.SignData(System.String,System.String)">
            <summary>
            对明文进行签名，返回明文签名的BASE64字符串
            </summary>
            <param name="source">要签名的明文</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <returns>明文签名的BASE64字符串</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.VerifyData(System.String,System.String,System.String)">
            <summary>
            使用指定公钥验证解密得到的明文是否符合签名
            </summary>
            <param name="source">解密后的明文</param>
            <param name="signData">明文的签名</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.Encrypt(System.Byte[],System.String)">
            <summary>
            使用指定公钥加密字节数组
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.Decrypt(System.Byte[],System.String)">
            <summary>
            使用私钥解密字节数组
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.SignData(System.Byte[],System.String,System.String)">
            <summary>
            使用指定私钥对明文进行签名，返回明文签名的字节数组
            </summary>
            <param name="source">要签名的明文字节数组</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <param name="privateKey">私钥</param>
            <returns>明文签名的字节数组</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.VerifyData(System.Byte[],System.Byte[],System.String,System.String)">
            <summary>
            使用指定公钥验证解密得到的明文是否符合签名
            </summary>
            <param name="source">解密的明文字节数组</param>
            <param name="signData">明文签名字节数组</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <param name="publicKey">公钥</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.Encrypt(System.String,System.String)">
            <summary>
            使用指定公钥加密字符串
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.Decrypt(System.String,System.String)">
            <summary>
            使用指定私钥解密字符串
            </summary>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.SignData(System.String,System.String,System.String)">
            <summary>
            使用指定私钥签名字符串
            </summary>
            <param name="source">要签名的字符串</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <param name="privateKey">私钥</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Secutiry.RsaHelper.VerifyData(System.String,System.String,System.String,System.String)">
            <summary>
            使用指定公钥验证解密得到的明文是否符合签名
            </summary>
            <param name="source">解密得到的明文</param>
            <param name="signData">明文签名的BASE64字符串</param>
            <param name="hashType">哈希类型，必须为 MD5 或 SHA1</param>
            <param name="publicKey">公钥</param>
            <returns>验证是否通过</returns>
        </member>
        <member name="T:OSharp.Utility.Web.UserAgentHelper">
            <summary>
            UserAgent辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Web.UserAgentHelper.GetOperatingSystemName(System.String)">
            <summary>
            根据 UserAgent 获取操作系统名称
            </summary>
        </member>
        <member name="M:OSharp.Utility.Web.UserAgentHelper.GetBrowserName(System.String)">
            <summary>
            根据 UserAgent 获取浏览器名称
            </summary>
        </member>
        <member name="T:OSharp.Utility.Windows.PresentationExtensions">
            <summary>
            WPF相关扩展
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.PresentationExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            
            </summary>
            <param name="dispatcher"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Utility.Windows.RegistryBaseKey">
            <summary>
            注册表基项域
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.RegistryBaseKey.ClassesRoot">
            <summary>
            对应于HKEY_CLASSES_ROOT主键
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.RegistryBaseKey.CurrentUser">
            <summary>
            对应于HKEY_CURRENT_USER主键
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.RegistryBaseKey.LocalMachine">
            <summary>
            对应于 HKEY_LOCAL_MACHINE主键
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.RegistryBaseKey.Users">
            <summary>
            对应于 HKEY_USER主键
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.RegistryBaseKey.CurrentConfig">
            <summary>
            对应于HEKY_CURRENT_CONFIG主键
            </summary>
        </member>
        <member name="T:OSharp.Utility.Windows.RegistryHelper">
            <summary>
            注册表辅助类
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.#ctor">
            <summary>
            使用默认参数实例化一个注册表操作实例
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.#ctor(System.String)">
            <summary>
            使用参数实例化一个注册表操作实例
            </summary>
            <param name="subKeyName">注册表项名称</param>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.#ctor(OSharp.Utility.Windows.RegistryBaseKey,System.String)">
            <summary>
            使用参数实例化一个注册表操作实例
            </summary>
            <param name="baseKey">注册表基项域</param>
            <param name="subKeyName">注册表项名称</param>
        </member>
        <member name="P:OSharp.Utility.Windows.RegistryHelper.BaseKey">
            <summary>
            获取或设置注册表基项域
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.RegistryHelper.SubKeyName">
            <summary>
            注册表项名称
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.RegistryHelper.ValueName">
            <summary>
            键值名称
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.GetTopKey">
            <summary>
            获取注册表基项域对应顶级节点
            </summary>
            <returns>顶级节点</returns>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.GetTopKey(OSharp.Utility.Windows.RegistryBaseKey)">
            <summary>
            获取指定注册表基项域对应顶级节点
            </summary>
            <returns>顶级节点</returns>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.OpenSubKey(System.Boolean)">
            <summary>
            打开注册表项节点
            </summary>
            <param name="writable">true为只读访问，false为写访问</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.OpenSubKey(OSharp.Utility.Windows.RegistryBaseKey,System.String,System.Boolean)">
            <summary>
            打开注册表项节点，以只读的方式检查子项
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项名称</param>
            <param name="writable">true为只读访问，false为写访问</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.IsExistSubKey">
            <summary>
            是否存在注册表项
            </summary>
            <returns>是否存在</returns>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.IsExistSubKey(OSharp.Utility.Windows.RegistryBaseKey,System.String)">
            <summary>
            是否存在指定的注册表项
            </summary>
            <param name="baseKey">要检查的基项域</param>
            <param name="subKeyName">要检查的注册表项名称</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.IsExistValueName">
            <summary>
            检查是否存在键值
            </summary>
            <returns>是否存在</returns>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.IsExistValueName(OSharp.Utility.Windows.RegistryBaseKey,System.String,System.String)">
            <summary>
            检查指定注册表项中是否存在指定键值
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.CreateSubKey">
            <summary>
            创建注册表项
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.CreateSubKey(OSharp.Utility.Windows.RegistryBaseKey,System.String)">
            <summary>
            在指定基项域中创建注册表项
            </summary>
            <param name="baseKey">定基项域</param>
            <param name="subKeyName">注册表项名称</param>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.DeleteSubKey">
            <summary>
            删除注册表项
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.DeleteSubKey(OSharp.Utility.Windows.RegistryBaseKey,System.String)">
            <summary>
            删除指定基项域中的注册表项
            </summary>
            <param name="baseKey">指定基项域</param>
            <param name="subKeyName">注册表项名称</param>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.GetValue">
            <summary>
            获取键值内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.GetValue(OSharp.Utility.Windows.RegistryBaseKey,System.String,System.String)">
            <summary>
            获取指定键值的内容
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.SetValue(System.Object)">
            <summary>
            设置键值的内容
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.SetValue(System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            设置键值的内容，并指定数据类型
            </summary>
            <param name="value">要设置的值</param>
            <param name="valueKind">设置值的数据类型</param>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.SetValue(OSharp.Utility.Windows.RegistryBaseKey,System.String,System.String,System.Object)">
            <summary>
            设置指定键值的内容
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
            <param name="value"></param>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.SetValue(OSharp.Utility.Windows.RegistryBaseKey,System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            设置指定键值的内容，并指定数据类型
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
            <param name="value">要设置的值</param>
            <param name="valueKind">要设置的值的数据类型</param>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.DeleteValue">
            <summary>
            删除键值
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.RegistryHelper.DeleteValue(OSharp.Utility.Windows.RegistryBaseKey,System.String,System.String)">
            <summary>
            删除指定的键值
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
        </member>
        <member name="T:OSharp.Utility.Windows.SystemInfo">
            <summary>
            系统信息类
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.CpuName">
            <summary>
            获取或设置 CPU型号
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.CpuId">
            <summary>
            获取或设置 CPU编号
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.BoardName">
            <summary>
            获取或设置 主板型号
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.BoardId">
            <summary>
            获取或设置 主板编号
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.DiskName">
            <summary>
            获取或设置 硬盘型号
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.DiskId">
            <summary>
            获取或设置 硬盘编号
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.OSName">
            <summary>
            获取或设置 操作系统名称
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.OSCsdVersion">
            <summary>
            获取或设置 操作系统补丁版本
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.OSIs64Bit">
            <summary>
            获取或设置 是否64位操作系统
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.OSVersion">
            <summary>
            获取或设置 操作系统版本
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.OSPath">
            <summary>
            获取或设置 操作系统路径
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.PhysicalMemoryFree">
            <summary>
            获取或设置 可用物理内存，单位：MB
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.PhysicalMemoryTotal">
            <summary>
            获取或设置 总共物理内存，单位：MB
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.ScreenWith">
            <summary>
            获取或设置 屏幕分辨率宽
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.ScreenHeight">
            <summary>
            获取或设置 屏幕分辨率高
            </summary>
        </member>
        <member name="P:OSharp.Utility.Windows.SystemInfo.ScreenColorDepth">
            <summary>
            获取或设置 屏幕色深
            </summary>
        </member>
        <member name="T:OSharp.Utility.Windows.SystemInfoHandler">
            <summary>
            获取系统硬件、软件信息
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.SystemInfoHandler.GetWmiInfos(OSharp.Utility.Windows.WMIPath)">
            <summary>
            获取指定WMI路径的信息集合
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.SystemInfoHandler.GetHardwareId">
            <summary>
            获取硬件信息标识
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.SystemInfoHandler.GetHardwareId(System.String)">
            <summary>
            由指定字符串生成硬件信息标识
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.SystemInfoHandler.GetOperationSystemName">
            <summary>
            获取操作系统名称
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.SystemInfoHandler.GetSystemInfo">
            <summary>
            获取系统信息
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.SystemInfoHandler.GetProcessNames">
            <summary>
            获取当前系统运行的进程列表
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.SystemInfoHandler.GetStartedServiceNamesEnumerable">
            <summary>
            获取当前系统正在运行的服务列表
            </summary>
        </member>
        <member name="M:OSharp.Utility.Windows.SystemInfoHandler.GetMaxFreeSizeLogicalDisk">
            <summary>
            获取剩余空间最大的逻辑磁盘名称
            </summary>
        </member>
        <member name="T:OSharp.Utility.Windows.WMIPath">
            <summary>
            表示WMI地址的枚举
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_Processor">
            <summary>
            CPU 处理器
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_PhysicalMemory">
            <summary>
            物理内存条
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_Keyboard">
            <summary>
            键盘
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_PointingDevice">
            <summary>
            点输入设备，包括鼠标。
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_FloppyDrive">
            <summary>
            软盘驱动器
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_DiskDrive">
            <summary>
            硬盘驱动器
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_CDROMDrive">
            <summary>
            光盘驱动器
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_BaseBoard">
            <summary>
            主板
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_BIOS">
            <summary>
            BIOS 芯片
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_ParallelPort">
            <summary>
            并口
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_SerialPort">
            <summary>
            串口
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_SerialPortConfiguration">
            <summary>
            串口配置
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_SoundDevice">
            <summary>
            多媒体设置，一般指声卡。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OSharp.Utility.Windows.WMIPath.Win32_SystemSlot" -->
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_USBController">
            <summary>
            USB 控制器
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_NetworkAdapter">
            <summary>
            网络适配器
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_NetworkAdapterConfiguration">
            <summary>
            网络适配器设置
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_Printer">
            <summary>
            打印机
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_PrinterConfiguration">
            <summary>
            打印机设置
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_PrintJob">
            <summary>
            打印机任务
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_TCPIPPrinterPort">
            <summary>
            打印机端口
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_POTSModem">
            <summary>
            MODEM
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_POTSModemToSerialPort">
            <summary>
            MODEM 端口
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_DesktopMonitor">
            <summary>
            显示器
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_DisplayConfiguration">
            <summary>
            显卡
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_DisplayControllerConfiguration">
            <summary>
            显卡设置
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_VideoController">
            <summary>
            显卡细节
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_VideoSettings">
            <summary>
            显卡支持的显示模式
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_TimeZone">
            <summary>
            时区
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_SystemDriver">
            <summary>
            驱动程序
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_DiskPartition">
            <summary>
            磁盘分区
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_LogicalDisk">
            <summary>
            逻辑磁盘
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_LogicalDiskToPartition">
            <summary>
            逻辑磁盘所在分区及始末位置
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_LogicalMemoryConfiguration">
            <summary>
            逻辑内存配置
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_PageFile">
            <summary>
            系统页文件信息
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_PageFileSetting">
            <summary>
            页文件设置
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_BootConfiguration">
            <summary>
            系统启动配置
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_ComputerSystem">
            <summary>
            计算机信息简要
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_OperatingSystem">
            <summary>
            操作系统信息
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_StartupCommand">
            <summary>
            系统自动启动程序
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_Service">
            <summary>
            系统安装的服务
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_Group">
            <summary>
            系统管理组
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_GroupUser">
            <summary>
            系统组帐号
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_UserAccount">
            <summary>
            用户帐号
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_Process">
            <summary>
            系统进程
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_Thread">
            <summary>
            系统线程
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_Share">
            <summary>
            共享
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_NetworkClient">
            <summary>
            已安装的网络客户端
            </summary>
        </member>
        <member name="F:OSharp.Utility.Windows.WMIPath.Win32_NetworkProtocol">
            <summary>
            已安装的网络协议
            </summary>
        </member>
    </members>
</doc>
