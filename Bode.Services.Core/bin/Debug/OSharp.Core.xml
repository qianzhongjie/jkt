<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OSharp.Core</name>
    </assembly>
    <members>
        <member name="T:OSharp.Core.Caching.CacheBase">
            <summary>
            缓存基类
            </summary>
        </member>
        <member name="P:OSharp.Core.Caching.CacheBase.Region">
            <summary>
            获取 缓存区域名称，可作为缓存键标识，给缓存管理带来便利
            </summary>
        </member>
        <member name="M:OSharp.Core.Caching.CacheBase.Get(System.String)">
            <summary>
            从缓存中获取数据
            </summary>
            <param name="key">缓存键</param>
            <returns>获取的数据</returns>
        </member>
        <member name="M:OSharp.Core.Caching.CacheBase.Get``1(System.String)">
            <summary>
            从缓存中获取强类型数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">缓存键</param>
            <returns>获取的强类型数据</returns>
        </member>
        <member name="M:OSharp.Core.Caching.CacheBase.GetAll">
            <summary>
            获取当前缓存对象中的所有数据
            </summary>
            <returns>所有数据的集合</returns>
        </member>
        <member name="M:OSharp.Core.Caching.CacheBase.GetAll``1">
            <summary>
            获取当前缓存中的所有数据
            </summary>
            <typeparam name="T">项数据类型</typeparam>
            <returns>所有数据的集合</returns>
        </member>
        <member name="M:OSharp.Core.Caching.CacheBase.Set(System.String,System.Object)">
            <summary>
            使用默认配置添加或替换缓存项
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
        </member>
        <member name="M:OSharp.Core.Caching.CacheBase.Set(System.String,System.Object,System.DateTime)">
            <summary>
            添加或替换缓存项并设置绝对过期时间
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="absoluteExpiration">绝对过期时间，过了这个时间点，缓存即过期</param>
        </member>
        <member name="M:OSharp.Core.Caching.CacheBase.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加或替换缓存项并设置相对过期时间
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="slidingExpiration">滑动过期时间，在此时间内访问缓存，缓存将继续有效</param>
        </member>
        <member name="M:OSharp.Core.Caching.CacheBase.Remove(System.String)">
            <summary>
            移除指定键的缓存
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:OSharp.Core.Caching.CacheBase.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:OSharp.Core.Caching.CacheLevel">
            <summary>
            缓存级别
            </summary>
        </member>
        <member name="F:OSharp.Core.Caching.CacheLevel.First">
            <summary>
            一级缓存
            </summary>
        </member>
        <member name="F:OSharp.Core.Caching.CacheLevel.Second">
            <summary>
            二级缓存
            </summary>
        </member>
        <member name="T:OSharp.Core.Caching.CacheManager">
            <summary>
            缓存操作管理器
            </summary>
        </member>
        <member name="M:OSharp.Core.Caching.CacheManager.SetProvider(OSharp.Core.Caching.ICacheProvider,OSharp.Core.Caching.CacheLevel)">
            <summary>
            设置缓存提供者
            </summary>
            <param name="provider">缓存提供者</param>
            <param name="level">缓存级别</param>
        </member>
        <member name="M:OSharp.Core.Caching.CacheManager.RemoveProvider(OSharp.Core.Caching.CacheLevel)">
            <summary>
            移除指定级别的缓存提供者
            </summary>
            <param name="level">缓存级别</param>
        </member>
        <member name="M:OSharp.Core.Caching.CacheManager.GetCacher(System.String)">
            <summary>
            获取指定区域的缓存执行者实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Caching.CacheManager.GetCacher(System.Type)">
            <summary>
            获取指定类型的缓存执行者实例
            </summary>
            <param name="type">类型实例</param>
        </member>
        <member name="M:OSharp.Core.Caching.CacheManager.GetCacher``1">
            <summary>
            获取指定类型的缓存执行者实例
            </summary>
        </member>
        <member name="T:OSharp.Core.Caching.InternalCacher">
            <summary>
            缓存执行者
            </summary>
        </member>
        <member name="M:OSharp.Core.Caching.InternalCacher.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Caching.InternalCacher"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Caching.InternalCacher.Get(System.String)">
            <summary>
            从缓存中获取数据
            </summary>
            <param name="key">缓存键</param>
            <returns>获取的数据</returns>
        </member>
        <member name="M:OSharp.Core.Caching.InternalCacher.Get``1(System.String)">
            <summary>
            从缓存中获取强类型数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">缓存键</param>
            <returns>获取的强类型数据</returns>
        </member>
        <member name="M:OSharp.Core.Caching.InternalCacher.GetAll">
            <summary>
            获取当前缓存对象中的所有数据
            </summary>
            <returns>所有数据的集合</returns>
        </member>
        <member name="M:OSharp.Core.Caching.InternalCacher.GetAll``1">
            <summary>
            获取当前缓存中的所有数据
            </summary>
            <typeparam name="T">项数据类型</typeparam>
            <returns>所有数据的集合</returns>
        </member>
        <member name="M:OSharp.Core.Caching.InternalCacher.Set(System.String,System.Object)">
            <summary>
            使用默认配置添加或替换缓存项
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
        </member>
        <member name="M:OSharp.Core.Caching.InternalCacher.Set(System.String,System.Object,System.DateTime)">
            <summary>
            添加或替换缓存项并设置绝对过期时间
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="absoluteExpiration">绝对过期时间，过了这个时间点，缓存即过期</param>
        </member>
        <member name="M:OSharp.Core.Caching.InternalCacher.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加或替换缓存项并设置相对过期时间
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="slidingExpiration">滑动过期时间，在此时间内访问缓存，缓存将继续有效</param>
        </member>
        <member name="M:OSharp.Core.Caching.InternalCacher.Remove(System.String)">
            <summary>
            移除指定键的缓存
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:OSharp.Core.Caching.InternalCacher.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:OSharp.Core.Caching.ICache">
            <summary>
            缓存操作约定
            </summary>
        </member>
        <member name="M:OSharp.Core.Caching.ICache.Get(System.String)">
            <summary>
            从缓存中获取数据
            </summary>
            <param name="key">缓存键</param>
            <returns>获取的数据</returns>
        </member>
        <member name="M:OSharp.Core.Caching.ICache.Get``1(System.String)">
            <summary>
            从缓存中获取强类型数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">缓存键</param>
            <returns>获取的强类型数据</returns>
        </member>
        <member name="M:OSharp.Core.Caching.ICache.GetAll">
            <summary>
            获取当前缓存对象中的所有数据
            </summary>
            <returns>所有数据的集合</returns>
        </member>
        <member name="M:OSharp.Core.Caching.ICache.GetAll``1">
            <summary>
            获取当前缓存中的所有数据
            </summary>
            <typeparam name="T">项数据类型</typeparam>
            <returns>所有数据的集合</returns>
        </member>
        <member name="M:OSharp.Core.Caching.ICache.Set(System.String,System.Object)">
            <summary>
            使用默认配置添加或替换缓存项
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
        </member>
        <member name="M:OSharp.Core.Caching.ICache.Set(System.String,System.Object,System.DateTime)">
            <summary>
            添加或替换缓存项并设置绝对过期时间
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="absoluteExpiration">绝对过期时间，过了这个时间点，缓存即过期</param>
        </member>
        <member name="M:OSharp.Core.Caching.ICache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加或替换缓存项并设置相对过期时间
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="slidingExpiration">滑动过期时间，在此时间内访问缓存，缓存将继续有效</param>
        </member>
        <member name="M:OSharp.Core.Caching.ICache.Remove(System.String)">
            <summary>
            移除指定键的缓存
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:OSharp.Core.Caching.ICache.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:OSharp.Core.Caching.ICacheProvider">
            <summary>
            缓存提供者约定，用于创建并管理缓存对象
            </summary>
        </member>
        <member name="M:OSharp.Core.Caching.ICacheProvider.GetCache(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="regionName">缓存区域名称</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Caching.QueryCacheExtensions">
            <summary>
            查询缓存扩展辅助操作
            </summary>
        </member>
        <member name="M:OSharp.Core.Caching.QueryCacheExtensions.ToPageCache``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},OSharp.Utility.Data.PageCondition,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32)">
            <summary>
            查询分页数据结果，如缓存存在，直接返回，否则从数据源查找分页结果，并存入缓存中再返回
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TResult">分页数据类型</typeparam>
            <param name="source">要查询的数据集</param>
            <param name="predicate">查询条件谓语表达式</param>
            <param name="pageCondition">分页查询条件</param>
            <param name="selector">数据筛选表达式</param>
            <param name="cacheSeconds">缓存的秒数</param>
            <returns>查询的分页结果</returns>
        </member>
        <member name="M:OSharp.Core.Caching.QueryCacheExtensions.ToPageCache``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},OSharp.Utility.Data.PageCondition,System.Linq.Expressions.Expression{System.Func{``0,``1}},OSharp.Core.Security.IFunction)">
            <summary>
            查询分页数据结果，如缓存存在，直接返回，否则从数据源查找分页结果，并存入缓存中再返回
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TResult">分页数据类型</typeparam>
            <param name="source">要查询的数据集</param>
            <param name="predicate">查询条件谓语表达式</param>
            <param name="pageCondition">分页查询条件</param>
            <param name="selector">数据筛选表达式</param>
            <param name="function">缓存策略相关功能</param>
            <returns>查询的分页结果</returns>
        </member>
        <member name="M:OSharp.Core.Caching.QueryCacheExtensions.ToCacheList``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            将结果转换为缓存的列表，如缓存存在，直接返回，否则从数据源查询，并存入缓存中再返回
            </summary>
            <typeparam name="TSource">源数据类型</typeparam>
            <param name="source">查询数据源</param>
            <param name="cacheSeconds">缓存的秒数</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:OSharp.Core.Caching.QueryCacheExtensions.ToCacheArray``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            将结果转换为缓存的数组，如缓存存在，直接返回，否则从数据源查询，并存入缓存中再返回
            </summary>
            <typeparam name="TSource">源数据类型</typeparam>
            <param name="source">查询数据源</param>
            <param name="cacheSeconds">缓存的秒数</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:OSharp.Core.Caching.QueryCacheExtensions.ToCacheList``1(System.Linq.IQueryable{``0},OSharp.Core.Security.IFunction)">
            <summary>
            将结果转换为缓存的列表，如缓存存在，直接返回，否则从数据源查询，并按指定缓存策略存入缓存中再返回
            </summary>
            <typeparam name="TSource">源数据类型</typeparam>
            <param name="source">查询数据源</param>
            <param name="function">缓存策略相关功能</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:OSharp.Core.Caching.QueryCacheExtensions.ToCacheArray``1(System.Linq.IQueryable{``0},OSharp.Core.Security.IFunction)">
            <summary>
            将结果转换为缓存的列表，如缓存存在，直接返回，否则从数据源查询，并按指定缓存策略存入缓存中再返回
            </summary>
            <typeparam name="TSource">源数据类型</typeparam>
            <param name="source">查询数据源</param>
            <param name="function">缓存策略相关功能</param>
            <returns>查询结果</returns>
        </member>
        <member name="T:OSharp.Core.Caching.RuntimeMemoryCache">
            <summary>
            运行时内存缓存
            </summary>
        </member>
        <member name="M:OSharp.Core.Caching.RuntimeMemoryCache.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Caching.RuntimeMemoryCache"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Caching.RuntimeMemoryCache.Region">
            <summary>
            获取 缓存区域名称，可作为缓存键标识，给缓存管理带来便利
            </summary>
        </member>
        <member name="M:OSharp.Core.Caching.RuntimeMemoryCache.Get(System.String)">
            <summary>
            从缓存中获取数据
            </summary>
            <param name="key">缓存键</param>
            <returns>获取的数据</returns>
        </member>
        <member name="M:OSharp.Core.Caching.RuntimeMemoryCache.Get``1(System.String)">
            <summary>
            从缓存中获取强类型数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">缓存键</param>
            <returns>获取的强类型数据</returns>
        </member>
        <member name="M:OSharp.Core.Caching.RuntimeMemoryCache.GetAll">
            <summary>
            获取当前缓存对象中的所有数据
            </summary>
            <returns>所有数据的集合</returns>
        </member>
        <member name="M:OSharp.Core.Caching.RuntimeMemoryCache.GetAll``1">
            <summary>
            获取当前缓存中的所有数据
            </summary>
            <typeparam name="T">项数据类型</typeparam>
            <returns>所有数据的集合</returns>
        </member>
        <member name="M:OSharp.Core.Caching.RuntimeMemoryCache.Set(System.String,System.Object)">
            <summary>
            使用默认配置添加或替换缓存项
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
        </member>
        <member name="M:OSharp.Core.Caching.RuntimeMemoryCache.Set(System.String,System.Object,System.DateTime)">
            <summary>
            添加或替换缓存项并设置绝对过期时间
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="absoluteExpiration">绝对过期时间，过了这个时间点，缓存即过期</param>
        </member>
        <member name="M:OSharp.Core.Caching.RuntimeMemoryCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加或替换缓存项并设置相对过期时间
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="slidingExpiration">滑动过期时间，在此时间内访问缓存，缓存将继续有效</param>
        </member>
        <member name="M:OSharp.Core.Caching.RuntimeMemoryCache.Remove(System.String)">
            <summary>
            移除指定键的缓存
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:OSharp.Core.Caching.RuntimeMemoryCache.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:OSharp.Core.Caching.RuntimeMemoryCacheProvider">
            <summary>
            运行时内存缓存提供程序
            </summary>
        </member>
        <member name="P:OSharp.Core.Caching.RuntimeMemoryCacheProvider.Enabled">
            <summary>
            获取 缓存是否可用
            </summary>
        </member>
        <member name="M:OSharp.Core.Caching.RuntimeMemoryCacheProvider.GetCache(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="regionName">缓存区域名称</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Configs.BasicLoggingConfig">
            <summary>
            基础日志配置信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.BasicLoggingConfig.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.BasicLoggingConfig"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.BasicLoggingConfig.#ctor(OSharp.Core.Configs.ConfigFile.BasicLoggingElement)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.BasicLoggingConfig"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.BasicLoggingConfig.AdapterConfigs">
            <summary>
            获取或设置 日志适配器配置信息集合
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.ConfigFile.ContextCollection">
            <summary>
            数据上下文配置节点集合
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.ContextCollection.ElementName">
            <summary>
            获取在派生的类中重写时用于标识配置文件中此元素集合的名称。
            </summary>
            <returns>
            集合的名称；否则为空字符串。 默认值为空字符串。
            </returns>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.ContextCollection.CollectionType">
            <summary>
            获取 <see cref="T:System.Configuration.ConfigurationElementCollection"/> 的类型。
            </summary>
            <returns>
            此集合的 <see cref="T:System.Configuration.ConfigurationElementCollectionType"/>。
            </returns>
        </member>
        <member name="M:OSharp.Core.Configs.ConfigFile.ContextCollection.CreateNewElement">
            <summary>
            当在派生的类中重写时，创建一个新的 <see cref="T:System.Configuration.ConfigurationElement"/>。
            </summary>
            <returns>
            一个新的 <see cref="T:System.Configuration.ConfigurationElement"/>。
            </returns>
        </member>
        <member name="M:OSharp.Core.Configs.ConfigFile.ContextCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            在派生类中重写时获取指定配置元素的元素键。
            </summary>
            <returns>
            一个 <see cref="T:System.Object"/>，用作指定 <see cref="T:System.Configuration.ConfigurationElement"/> 的键。
            </returns>
            <param name="element">要为其返回键的 <see cref="T:System.Configuration.ConfigurationElement"/>。</param>
        </member>
        <member name="M:OSharp.Core.Configs.ConfigFile.ContextCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            在派生类中添加指定元素的元素键
            </summary>
            <param name="element">要添加的键 <see cref="T:System.Configuration.ConfigurationElement"/>。</param>
        </member>
        <member name="M:OSharp.Core.Configs.ConfigFile.ContextCollection.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)">
            <summary>
            在派生类中添加指定元素的元素键
            </summary>
            <param name="index"> 要添加指定 <see cref="T:System.Configuration.ConfigurationElement"/> 的索引位置。</param>
            <param name="element"> 要相加的 <see cref="T:System.Configuration.ConfigurationElement"/>。</param>
        </member>
        <member name="T:OSharp.Core.Configs.ConfigFile.ContextElement">
            <summary>
            数据上下文配置节点
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.ContextElement.Name">
            <summary>
            获取或设置 节点名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.ContextElement.Enabled">
            <summary>
            获取或设置 是否启用数据上下文
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.ContextElement.DataLoggingEnabled">
            <summary>
            获取或设置 是否开启数据日志记录
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.ContextElement.ConnectionStringName">
            <summary>
            获取或设置 数据库连接串名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.ContextElement.ReadConnectionStringNames">
            <summary>
            获取或设置 读库字符串名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.ContextElement.ContextTypeName">
            <summary>
            获取或设置 数据上下文类型名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.ContextElement.DbContextInitializer">
            <summary>
            获取或设置 数据上下文初始化配置
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.ConfigFile.BasicLoggingElement">
            <summary>
            基础日志配置节点
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.BasicLoggingElement.Adapters">
            <summary>
            获取或设置 日志适配器配置节点集合
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.ConfigFile.DataLoggingElement">
            <summary>
            数据日志配置节点
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.DataLoggingElement.Enabled">
            <summary>
            获取或设置 是否允许数据日志输出
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.DataLoggingElement.OutLogLevel">
            <summary>
            获取或设置 数据日志输出级别
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.DataLoggingElement.AdapterTypeName">
            <summary>
            获取或设置 数据日志输出适配器类型名称
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.ConfigFile.LoggingEntryElement">
            <summary>
            日志输入配置节点
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.LoggingEntryElement.Enabled">
            <summary>
            获取或设置 是否允许日志输入
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.LoggingEntryElement.EntryLogLevel">
            <summary>
            获取或设置 日志输入级别
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.ConfigFile.CreateDatabaseInitializerElement">
            <summary>
            数据库创建策略配置节点
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.CreateDatabaseInitializerElement.InitializerTypeName">
            <summary>
            获取或设置 数据库创建策略类型名称
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.ConfigFile.DataElement">
            <summary>
            数据配置节点
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.DataElement.Contexts">
            <summary>
            数据上下文配置节点集合
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.ConfigFile.DbContextInitializerElement">
            <summary>
            数据上下文初始化配置节点
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.DbContextInitializerElement.InitializerTypeName">
            <summary>
            获取或设置 初始化配置类型名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.DbContextInitializerElement.EntityMapperFiles">
            <summary>
            获取或设置 实体映射类所在程序集名称字符串
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.DbContextInitializerElement.CreateDatabaseInitializer">
            <summary>
            获取或设置 数据库创建策略配置
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.ConfigFile.LoggingAdapterCollection">
            <summary>
            日志适配器配置节点集合
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.LoggingAdapterCollection.ElementName">
            <summary>
            获取在派生的类中重写时用于标识配置文件中此元素集合的名称。
            </summary>
            <returns>
            集合的名称；否则为空字符串。 默认值为空字符串。
            </returns>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.LoggingAdapterCollection.CollectionType">
            <summary>
            获取 <see cref="T:System.Configuration.ConfigurationElementCollection"/> 的类型。
            </summary>
            <returns>
            此集合的 <see cref="T:System.Configuration.ConfigurationElementCollectionType"/>。
            </returns>
        </member>
        <member name="M:OSharp.Core.Configs.ConfigFile.LoggingAdapterCollection.CreateNewElement">
            <summary>
            当在派生的类中重写时，创建一个新的 <see cref="T:System.Configuration.ConfigurationElement"/>。
            </summary>
            <returns>
            一个新的 <see cref="T:System.Configuration.ConfigurationElement"/>。
            </returns>
        </member>
        <member name="M:OSharp.Core.Configs.ConfigFile.LoggingAdapterCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            在派生类中重写时获取指定配置元素的元素键。
            </summary>
            <returns>
            一个 <see cref="T:System.Object"/>，用作指定 <see cref="T:System.Configuration.ConfigurationElement"/> 的键。
            </returns>
            <param name="element">要为其返回键的 <see cref="T:System.Configuration.ConfigurationElement"/>。</param>
        </member>
        <member name="T:OSharp.Core.Configs.ConfigFile.LoggingAdapterElement">
            <summary>
            日志输出适配器配置节点
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.LoggingAdapterElement.Name">
            <summary>
            获取或设置 适配器名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.LoggingAdapterElement.Enabled">
            <summary>
            获取或设置 是否启用
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.LoggingAdapterElement.AdapterTypeName">
            <summary>
            获取或设置 适配器类型名称
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.ConfigFile.LoggingElement">
            <summary>
            日志配置节点
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.LoggingElement.LoggingEntry">
            <summary>
            获取或设置 日志输入配置节点
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.ConfigFile.LoggingElement.BasicLogging">
            <summary>
            获取或设置 基础日志配置节点
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.DataLoggingConfig">
            <summary>
            数据日志配置信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.DataLoggingConfig.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.DataLoggingConfig"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.DataLoggingConfig.#ctor(OSharp.Core.Configs.ConfigFile.DataLoggingElement)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.DataLoggingConfig"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DataLoggingConfig.Enabled">
            <summary>
            获取或设置 是否启用数据日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DataLoggingConfig.OutLevel">
            <summary>
            获取或设置 日志输出级别
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DataLoggingConfig.AdapterType">
            <summary>
            获取或设置 适配器类型
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.DbContextConfig">
            <summary>
            OSharp数据上下文配置
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.DbContextConfig.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.DbContextConfig"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.DbContextConfig.#ctor(OSharp.Core.Configs.ConfigFile.ContextElement)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.DbContextConfig"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DbContextConfig.Name">
            <summary>
            获取或设置 上下文名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DbContextConfig.Enabled">
            <summary>
            获取或设置 是否可用
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DbContextConfig.DataLoggingEnabled">
            <summary>
            获取或设置 是否启用数据日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DbContextConfig.ConnectionStringName">
            <summary>
            获取或设置 数据库连接串名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DbContextConfig.ReadConnectionStringNames">
            <summary>
            获取或设置 读库连接串集合
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DbContextConfig.ContextType">
            <summary>
            获取或设置 数据上下文类型
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DbContextConfig.InitializerConfig">
            <summary>
            获取或设置 数据上下文初始化配置
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.DataConfig">
            <summary>
            数据配置信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.DataConfig.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.DataConfig"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.DataConfig.#ctor(OSharp.Core.Configs.ConfigFile.DataElement)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.DataConfig"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DataConfig.ContextConfigs">
            <summary>
            获取或设置 上下文配置信息集合
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.DbContextInitializerConfig">
            <summary>
            数据上下文初始化配置
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.DbContextInitializerConfig.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.DbContextInitializerConfig"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.DbContextInitializerConfig.#ctor(OSharp.Core.Configs.ConfigFile.DbContextInitializerElement)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.DbContextInitializerConfig"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DbContextInitializerConfig.InitializerType">
            <summary>
            获取或设置 数据上下文初始化类型
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DbContextInitializerConfig.EntityMapperAssemblies">
            <summary>
            获取或设置 实体映射类型所在程序集集合
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.DbContextInitializerConfig.CreateDatabaseInitializerType">
            <summary>
            获取或设置 创建数据库初始化类型
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.IDataConfigReseter">
            <summary>
            OSharp数据配置信息重置类
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.IDataConfigReseter.Reset(OSharp.Core.Configs.DataConfig)">
            <summary>
            重置数据配置信息
            </summary>
            <param name="config">原始数据配置信息</param>
            <returns>重置后的数据配置信息</returns>
        </member>
        <member name="T:OSharp.Core.Configs.ILoggingConfigReseter">
            <summary>
            定义日志配置信息重置功能
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.ILoggingConfigReseter.Reset(OSharp.Core.Configs.LoggingConfig)">
            <summary>
            日志配置信息重置
            </summary>
            <param name="config">待重置的日志配置信息</param>
            <returns>重置后的日志配置信息</returns>
        </member>
        <member name="T:OSharp.Core.Configs.LoggingAdapterConfig">
            <summary>
            日志适配器配置信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.LoggingAdapterConfig.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.LoggingAdapterConfig"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.LoggingAdapterConfig.#ctor(OSharp.Core.Configs.ConfigFile.LoggingAdapterElement)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.LoggingAdapterConfig"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.LoggingAdapterConfig.Name">
            <summary>
            获取或设置 适配器名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.LoggingAdapterConfig.Enabled">
            <summary>
            获取或设置 是否启用适配器
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.LoggingAdapterConfig.AdapterType">
            <summary>
            获取或设置 适配器类型
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.LoggingConfig">
            <summary>
            日志配置信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.LoggingConfig.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.LoggingConfig"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.LoggingConfig.#ctor(OSharp.Core.Configs.ConfigFile.LoggingElement)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.LoggingConfig"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.LoggingConfig.EntryConfig">
            <summary>
            获取或设置 日志入口配置信息
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.LoggingConfig.DataLoggingConfig">
            <summary>
            获取或设置 数据日志配置信息
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.LoggingConfig.BasicLoggingConfig">
            <summary>
            获取或设置 基本日志配置信息
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.LoggingEntryConfig">
            <summary>
            日志记录入口配置
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.LoggingEntryConfig.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.LoggingEntryConfig"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.LoggingEntryConfig.#ctor(OSharp.Core.Configs.ConfigFile.LoggingEntryElement)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Configs.LoggingEntryConfig"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.LoggingEntryConfig.Enabled">
            <summary>
            获取或设置 从入口控制是否允许记录日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.LoggingEntryConfig.EntryLogLevel">
            <summary>
            获取或设置 入口允许记录的日志等级
            </summary>
        </member>
        <member name="T:OSharp.Core.Configs.OSharpConfig">
            <summary>
            OSharp配置类
            </summary>
        </member>
        <member name="M:OSharp.Core.Configs.OSharpConfig.#ctor">
            <summary>
            初始化一个新的<see cref="T:OSharp.Core.Configs.OSharpConfig"/>实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.OSharpConfig.Instance">
            <summary>
            获取 配置类的单一实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.OSharpConfig.DataConfigReseter">
            <summary>
            获取或设置 数据配置重置信息
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.OSharpConfig.LoggingConfigReseter">
            <summary>
            获取或设置 日志配置重置信息
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.OSharpConfig.DataConfig">
            <summary>
            获取或设置 数据配置信息
            </summary>
        </member>
        <member name="P:OSharp.Core.Configs.OSharpConfig.LoggingConfig">
            <summary>
            获取或设置 日志配置信息
            </summary>
        </member>
        <member name="T:OSharp.Core.Constants">
            <summary>
            常量
            </summary>
        </member>
        <member name="T:OSharp.Core.Context.Operator">
            <summary>
            当前操作者信息类
            </summary>
        </member>
        <member name="P:OSharp.Core.Context.Operator.UserId">
            <summary>
            获取或设置 当前用户标识
            </summary>
        </member>
        <member name="P:OSharp.Core.Context.Operator.UserName">
            <summary>
            获取或设置 当前用户名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Context.Operator.PhoneNo">
            <summary>
            电话号码
            </summary>
        </member>
        <member name="P:OSharp.Core.Context.Operator.ClientVersion">
            <summary>
            获取或设置 客户端版本
            </summary>
        </member>
        <member name="P:OSharp.Core.Context.Operator.LoginDevice">
            <summary>
            登录设备
            </summary>
        </member>
        <member name="P:OSharp.Core.Context.Operator.ValidatePeriod">
            <summary>
            有效期
            </summary>
        </member>
        <member name="P:OSharp.Core.Context.Operator.UserDatas">
            <summary>
            用户数据
            </summary>
        </member>
        <member name="P:OSharp.Core.Context.Operator.Ip">
            <summary>
            操作Ip地址
            </summary>
        </member>
        <member name="T:OSharp.Core.Context.LoginDevice">
            <summary>
            登录设备
            </summary>
        </member>
        <member name="F:OSharp.Core.Context.LoginDevice.Android">
            <summary>
            Android
            </summary>
        </member>
        <member name="F:OSharp.Core.Context.LoginDevice.Ios">
            <summary>
            IOS
            </summary>
        </member>
        <member name="F:OSharp.Core.Context.LoginDevice.Web">
            <summary>
            web登录
            </summary>
        </member>
        <member name="T:OSharp.Core.Context.OSharpContext">
            <summary>
            OSharp框架上下文，用于构造OSharp框架运行环境
            </summary>
        </member>
        <member name="P:OSharp.Core.Context.OSharpContext.Current">
            <summary>
            获取 当前上下文
            </summary>
        </member>
        <member name="P:OSharp.Core.Context.OSharpContext.Operator">
            <summary>
            获取 当前操作者
            </summary>
        </member>
        <member name="M:OSharp.Core.Context.OSharpContext.SetOperator(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            设置当前操作者信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Context.OSharpContext.SetOperator(OSharp.Core.Context.Operator)">
            <summary>
            设置当前操作者对象
            </summary>
            <param name="user"></param>
        </member>
        <member name="P:OSharp.Core.Context.OSharpContext.FunctionHandler">
            <summary>
            获取或设置 功能信息处理器
            </summary>
        </member>
        <member name="P:OSharp.Core.Context.OSharpContext.EntityInfoHandler">
            <summary>
            获取或设置 实体数据信息处理器
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.ExpirableBase`1">
            <summary>
            可过期实体基类
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:OSharp.Core.Data.ExpirableBase`1.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Data.ExpirableBase`1"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.ExpirableBase`1.BeginTime">
            <summary>
            获取或设置 生效时间
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.ExpirableBase`1.EndTime">
            <summary>
            获取或设置 过期时间
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.Extensions.EntityInterfaceExtensions">
            <summary>
            实体接口相关扩展
            </summary>
        </member>
        <member name="M:OSharp.Core.Data.Extensions.EntityInterfaceExtensions.CheckICreatedTime``2(``0)">
            <summary>
            检测并执行<see cref="T:OSharp.Core.Data.ICreatedTime"/>接口的逻辑
            </summary>
            <param name="entity">要检测的实体信息</param>
        </member>
        <member name="M:OSharp.Core.Data.Extensions.EntityInterfaceExtensions.CheckICreatedAudited``2(``0)">
            <summary>
            检测并执行<see cref="T:OSharp.Core.Data.ICreatedAudited"/>接口的逻辑
            </summary>
            <param name="entity">要检测的实体信息</param>
        </member>
        <member name="M:OSharp.Core.Data.Extensions.EntityInterfaceExtensions.CheckIUpdateAudited``2(``0)">
            <summary>
            检测并执行<see cref="T:OSharp.Core.Data.IUpdateAudited"/>接口的逻辑
            </summary>
            <param name="entity">要检测的实体信息</param>
        </member>
        <member name="M:OSharp.Core.Data.Extensions.EntityInterfaceExtensions.CheckIRecycle``2(``0,OSharp.Core.Data.RecycleOperation)">
            <summary>
            检测并执行<see cref="T:OSharp.Core.Data.IRecyclable"/>接口的逻辑
            </summary>
            <param name="entity">要检测的实体信息</param>
            <param name="operation">回收站操作类型</param>
        </member>
        <member name="M:OSharp.Core.Data.Extensions.EntityInterfaceExtensions.IsEntityType(System.Type)">
            <summary>
            判断指定类型是否为<see cref="T:OSharp.Core.Data.IEntity`1"/>实体类型
            </summary>
            <param name="type">要判断的类型</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Data.Extensions.CollectionExtensions">
            <summary>
            集合扩展辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Core.Data.Extensions.CollectionExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},OSharp.Utility.Data.PageCondition,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            从指定<see cref="T:System.Linq.IQueryable`1"/>集合中查询指定数据筛选的分页信息
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TResult">分页数据类型</typeparam>
            <param name="source">要查询的数据集</param>
            <param name="predicate">查询条件谓语表达式</param>
            <param name="pageCondition">分页查询条件</param>
            <param name="selector">数据筛选表达式</param>
            <returns>分页结果信息</returns>
        </member>
        <member name="M:OSharp.Core.Data.Extensions.CollectionExtensions.ToPage``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,OSharp.Utility.Data.SortCondition[],System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            从指定<see cref="T:System.Linq.IQueryable`1"/>集合中查询指定数据筛选的分页信息
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TResult">分页数据类型</typeparam>
            <param name="source">要查询的数据集</param>
            <param name="predicate">查询条件谓语表达式</param>
            <param name="pageIndex">分页索引</param>
            <param name="pageSize">分页大小</param>
            <param name="sortConditions">排序条件集合</param>
            <param name="selector">数据筛选表达式</param>
            <returns>分页结果信息</returns>
        </member>
        <member name="M:OSharp.Core.Data.Extensions.CollectionExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},OSharp.Utility.Data.PageCondition,System.Int32@)">
            <summary>
            从指定<see cref="T:System.Linq.IQueryable`1"/>集合中查询指定分页条件的子数据集
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">要查询的数据集</param>
            <param name="predicate">查询条件谓语表达式</param>
            <param name="pageCondition">分页查询条件</param>
            <param name="total">输出符合条件的总记录数</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Data.Extensions.CollectionExtensions.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Int32@,OSharp.Utility.Data.SortCondition[])">
            <summary>
            从指定<see cref="T:System.Linq.IQueryable`1"/>集合中查询指定分页条件的子数据集
            </summary>
            <typeparam name="TEntity">动态实体类型</typeparam>
            <param name="source">要查询的数据集</param>
            <param name="predicate">查询条件谓语表达式</param>
            <param name="pageIndex">分页索引</param>
            <param name="pageSize">分页大小</param>
            <param name="total">输出符合条件的总记录数</param>
            <param name="sortConditions">排序条件集合</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Data.Extensions.CollectionExtensions.Unexpired``1(System.Linq.IQueryable{``0})">
            <summary>
            从指定<see cref="T:System.Linq.IQueryable`1"/>集合中查询未过期的子数据集，用于筛选实现了<see cref="T:OSharp.Core.Data.IExpirable"/>接口的数据集
            </summary>
        </member>
        <member name="M:OSharp.Core.Data.Extensions.CollectionExtensions.Unrecycled``1(System.Linq.IQueryable{``0})">
            <summary>
            从指定<see cref="T:System.Linq.IQueryable`1"/>数据集中查询未逻辑删除的子数据集，用于筛选实现了<see cref="T:OSharp.Core.Data.IRecyclable"/>接口的数据集
            </summary>
        </member>
        <member name="M:OSharp.Core.Data.Extensions.CollectionExtensions.Unlocked``1(System.Linq.IQueryable{``0})">
            <summary>
            从指定<see cref="T:System.Linq.IQueryable`1"/>数据集中查询未锁定的子数据集，用于筛选实现了<see cref="T:OSharp.Core.Data.ILockable"/>接口的数据集
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.IEntity`1">
            <summary>
            数据模型接口
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.IEntity`1.Id">
            <summary>
            获取或设置 实体唯一标识，主键
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.IAddDto">
            <summary>
            添加DTO
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.IEditDto`1">
            <summary>
            编辑DTO
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:OSharp.Core.Data.IEditDto`1.Id">
            <summary>
            获取或设置 主键，唯一标识
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.IInputDto`1">
            <summary>
            定义输入DTO
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:OSharp.Core.Data.IInputDto`1.Id">
            <summary>
            获取或设置 主键，唯一标识
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.IOutputDto">
            <summary>
            定义输出DTO
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.EntityBase`1">
            <summary>
            可持久化到数据库的数据模型基类
            </summary>
            <typeparam name="TKey">主键数据类型</typeparam>
        </member>
        <member name="M:OSharp.Core.Data.EntityBase`1.#ctor">
            <summary>
            初始化创建时间
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.EntityBase`1.Id">
            <summary>
            获取或设置 实体唯一标识，主键
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.EntityBase`1.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.EntityBase`1.Timestamp">
            <summary>
            获取或设置 版本控制标识，用于处理并发
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.EntityBase`1.IsDeleted">
            <summary>
            获取或设置 是否已逻辑删除
            </summary>
        </member>
        <member name="M:OSharp.Core.Data.EntityBase`1.Equals(System.Object)">
            <summary>
            判断两个实体是否是同一数据记录的实体
            </summary>
            <param name="obj">要比较的实体信息</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Data.EntityBase`1.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>
            当前 <see cref="T:System.Object"/> 的哈希代码。<br/>
            如果<c>Id</c>为<c>null</c>则返回0，
            如果不为<c>null</c>则返回<c>Id</c>对应的哈希值
            </returns>
        </member>
        <member name="T:OSharp.Core.Data.IAudited">
            <summary>
            表示审计属性，包含<see cref="T:OSharp.Core.Data.ICreatedAudited"/>与<see cref="T:OSharp.Core.Data.IUpdateAudited"/>
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.ICreatedAudited">
            <summary>
            给信息添加 创建时间、创建者 属性，在实体创建时，将自动提取当前用户为创建者
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.ICreatedAudited.CreatorUserId">
            <summary>
            获取或设置 创建者编号
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.ICreatedTime">
            <summary>
            表示实体将包含创建时间，在创建实体时，将自动提取当前时间为创建时间
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.ICreatedTime.CreatedTime">
            <summary>
            获取设置 信息创建时间
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.IExpirable">
            <summary>
            定义可过期性，包含生效时间与过期时间
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.IExpirable.BeginTime">
            <summary>
            获取或设置 生效时间
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.IExpirable.EndTime">
            <summary>
            获取或设置 过期时间
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.ILockable">
            <summary>
            定义可锁定功能
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.ILockable.IsLocked">
            <summary>
            获取或设置 是否锁定
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.IRecyclable">
            <summary>
            表示实体将启用回收站机制，包含逻辑删除属性，运行逻辑如下：
            1.实体删除时，将执行逻辑删除，而非物理删除
            2.正常数据筛选时，将自动过滤已逻辑删除的信息
            3.实体还原时，必须已逻辑删除
            4.实体物理删除时，必须已逻辑删除
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.IRecyclable.IsDeleted">
            <summary>
            获取或设置 是否已逻辑删除
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.RecycleOperation">
            <summary>
            回收站操作类型
            </summary>
        </member>
        <member name="F:OSharp.Core.Data.RecycleOperation.LogicDelete">
            <summary>
            逻辑删除
            </summary>
        </member>
        <member name="F:OSharp.Core.Data.RecycleOperation.Restore">
            <summary>
            还原
            </summary>
        </member>
        <member name="F:OSharp.Core.Data.RecycleOperation.PhysicalDelete">
            <summary>
            物理删除
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.ITimestamp">
            <summary>
            用于获取或设置 版本控制标识,用于处理并发
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.ITimestamp.Timestamp">
            <summary>
            获取或设置 版本控制标识，用于处理并发
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.IUpdateAudited">
            <summary>
            表示实体将包含更新者，更新时间属性，将在实体更新时自动赋值
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.IUpdateAudited.LastUpdatedTime">
            <summary>
            获取或设置 最后更新时间
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.IUpdateAudited.LastUpdatorUserId">
            <summary>
            获取或设置 最后更新者编号
            </summary>
        </member>
        <member name="T:OSharp.Core.Data.IRepository`2">
            <summary>
            实体仓储模型的数据标准操作
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:OSharp.Core.Data.IRepository`2.UnitOfWork">
            <summary>
            获取 当前单元操作对象
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.IRepository`2.Entities">
            <summary>
            获取 当前实体类型的查询数据集，数据将使用不跟踪变化的方式来查询
            </summary>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Insert(`0)">
            <summary>
            插入实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量插入实体
            </summary>
            <param name="entities">实体对象集合</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Insert``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})">
            <summary>
            以DTO为载体批量插入实体
            </summary>
            <typeparam name="TAddDto">添加DTO类型</typeparam>
            <param name="dtos">添加DTO信息集合</param>
            <param name="checkAction">添加信息合法性检查委托</param>
            <param name="updateFunc">由DTO到实体的转换委托</param>
            <returns>业务操作结果</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Recycle(`0)">
            <summary>
            逻辑删除实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Recycle(`1)">
            <summary>
            逻辑删除指定编号的实体
            </summary>
            <param name="key">实体编号</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Recycle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            逻辑删除所有符合特定条件的实体
            </summary>
            <param name="predicate">查询条件谓语表达式</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Recycle(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量逻辑删除实体
            </summary>
            <param name="entities">实体对象集合</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Restore(`0)">
            <summary>
            逻辑还原实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Restore(`1)">
            <summary>
            逻辑还原指定编号的实体
            </summary>
            <param name="key">实体编号</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Restore(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            逻辑还原所有符合特定条件的实体
            </summary>
            <param name="predicate">查询条件谓语表达式</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Restore(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量逻辑还原实体
            </summary>
            <param name="entities">实体对象集合</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Delete(`0)">
            <summary>
            删除实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Delete(`1)">
            <summary>
            删除指定编号的实体
            </summary>
            <param name="key">实体主键</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除所有符合特定条件的实体
            </summary>
            <param name="predicate">查询条件谓语表达式</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量删除实体
            </summary>
            <param name="entities">实体对象集合</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Delete(System.Collections.Generic.ICollection{`1},System.Action{`0},System.Func{`0,`0})">
            <summary>
            以标识集合批量删除实体
            </summary>
            <param name="ids">标识集合</param>
            <param name="checkAction">删除前置检查委托</param>
            <param name="deleteFunc">删除委托，用于删除关联信息</param>
            <returns>业务操作结果</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.DeleteDirect(`1)">
            <summary>
            直接删除指定编号的实体，此方法不支持事务
            </summary>
            <param name="key">实体主键</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.DeleteDirect(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接删除所有符合特定条件的实体，此方法不支持事务
            </summary>
            <param name="predicate">查询条件谓语表达式</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Update(`0)">
            <summary>
            更新实体对象
            </summary>
            <param name="entity">更新后的实体对象</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.Update``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Func{``0,`0,`0})">
            <summary>
            以DTO为载体批量更新实体
            </summary>
            <typeparam name="TEditDto">更新DTO类型</typeparam>
            <param name="dtos">更新DTO信息集合</param>
            <param name="checkAction">更新信息合法性检查委托</param>
            <param name="updateFunc">由DTO到实体的转换委托</param>
            <returns>业务操作结果</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.UpdateDirect(`1,System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            直接更新指定编号的数据，此方法不支持事务
            </summary>
            <param name="key">实体编号</param>
            <param name="updatExpression">更新属性表达式</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.UpdateDirect(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            直接更新指定条件的数据，此方法不支持事务
            </summary>
            <param name="predicate">查询条件谓语表达式</param>
            <param name="updatExpression">更新属性表达式</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.CheckExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)">
            <summary>
            检查实体是否存在
            </summary>
            <param name="predicate">查询条件谓语表达式</param>
            <param name="id">编辑的实体标识</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.GetByKey(`1)">
            <summary>
            查找指定主键的实体
            </summary>
            <param name="key">实体主键</param>
            <returns>符合主键的实体，不存在时返回null</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.GetByPredicate(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询指定条件的实体
            </summary>
            <param name="predicate">查询表达式</param>
            <returns>符合条件的实体集合</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.GetInclude``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取贪婪加载导航属性的查询数据集
            </summary>
            <param name="path">属性表达式，表示要贪婪加载的导航属性</param>
            <returns>查询数据集</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.GetIncludes(System.String[])">
            <summary>
            获取贪婪加载多个导航属性的查询数据集
            </summary>
            <param name="paths">要贪婪加载的导航属性名称数组</param>
            <returns>查询数据集</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.SqlQuery(System.String,System.Boolean,System.Object[])">
            <summary>
            创建一个原始 SQL 查询，该查询将返回此集中的实体。 
            默认情况下，上下文会跟踪返回的实体；可通过对返回的 DbRawSqlQuery 调用 AsNoTracking 来更改此设置。 请注意返回实体的类型始终是此集的类型，而不会是派生的类型。 如果查询的一个或多个表可能包含其他实体类型的数据，则必须编写适当的 SQL 查询以确保只返回适当类型的实体。 与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。 您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。 您提供的任何参数值都将自动转换为 DbParameter。 context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。 这允许您在 SQL 查询字符串中使用命名参数。 context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
            </summary>
            <param name="trackEnabled">是否跟踪返回实体</param>
            <param name="sql">SQL 查询字符串。</param>
            <param name="parameters">要应用于 SQL 查询字符串的参数。 如果使用输出参数，则它们的值在完全读取结果之前不可用。 这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.InsertAsync(`0)">
            <summary>
            异步插入实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量插入实体
            </summary>
            <param name="entities">实体对象集合</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.RecycleAsync(`0)">
            <summary>
            异步逻辑删除实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.RecycleAsync(`1)">
            <summary>
            异步逻辑删除指定编号的实体
            </summary>
            <param name="key">实体编号</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.RecycleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步逻辑删除所有符合特定条件的实体
            </summary>
            <param name="predicate">查询条件谓语表达式</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.RecycleAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量逻辑删除实体
            </summary>
            <param name="entities">实体对象集合</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.RestoreAsync(`0)">
            <summary>
            异步逻辑还原实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.RestoreAsync(`1)">
            <summary>
            异步逻辑还原指定编号的实体
            </summary>
            <param name="key">实体编号</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.RestoreAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步逻辑还原所有符合特定条件的实体
            </summary>
            <param name="predicate">查询条件谓语表达式</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.RestoreAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量逻辑还原实体
            </summary>
            <param name="entities">实体对象集合</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.DeleteAsync(`0)">
            <summary>
            异步删除实体
            </summary>
            <param name="entity">实体对象</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.DeleteAsync(`1)">
            <summary>
            异步删除指定编号的实体
            </summary>
            <param name="key">实体编号</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步删除所有符合特定条件的实体
            </summary>
            <param name="predicate">查询条件谓语表达式</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            异步批量删除删除实体
            </summary>
            <param name="entities">实体对象集合</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.DeleteDirectAsync(`1)">
            <summary>
            直接删除指定编号的实体，此方法不支持事务
            </summary>
            <param name="key">实体主键</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.DeleteDirectAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接删除所有符合特定条件的实体，此方法不支持事务
            </summary>
            <param name="predicate">查询条件谓语表达式</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.UpdateAsync(`0)">
            <summary>
            异步更新实体对象
            </summary>
            <param name="entity">更新后的实体对象</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.UpdateDirectAsync(`1,System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            直接更新指定编号的数据，此方法不支持事务
            </summary>
            <param name="key">实体编号</param>
            <param name="updatExpression">更新属性表达式</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.UpdateDirectAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            直接更新指定条件的数据，此方法不支持事务
            </summary>
            <param name="predicate">查询条件谓语表达式</param>
            <param name="updatExpression">更新属性表达式</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.CheckExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`1)">
            <summary>
            异步检查实体是否存在
            </summary>
            <param name="predicate">查询条件谓语表达式</param>
            <param name="id">编辑的实体标识</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.GetByKeyAsync(`1)">
            <summary>
            异步查找指定主键的实体
            </summary>
            <param name="key">实体主键</param>
            <returns>符合主键的实体，不存在时返回null</returns>
        </member>
        <member name="M:OSharp.Core.Data.IRepository`2.GetByPredicateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步查询指定条件的实体
            </summary>
            <param name="predicate">查询表达式</param>
            <returns>符合条件的实体集合</returns>
        </member>
        <member name="T:OSharp.Core.Data.IUnitOfWork">
            <summary>
            业务单元操作接口
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.IUnitOfWork.TransactionEnabled">
            <summary>
            获取或设置 是否开启事务提交
            </summary>
        </member>
        <member name="P:OSharp.Core.Data.IUnitOfWork.ReadContext">
            <summary>
            获取读库上下文
            </summary>
        </member>
        <member name="M:OSharp.Core.Data.IUnitOfWork.ExecuteSqlCommand(OSharp.Core.Data.TransactionalBehavior,System.String,System.Object[])">
            <summary>
            对数据库执行给定的 DDL/DML 命令。 
            与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。 您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。 
            您提供的任何参数值都将自动转换为 DbParameter。 unitOfWork.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 
            或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。 这允许您在 SQL 查询字符串中使用命名参数。 unitOfWork.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
            </summary>
            <param name="transactionalBehavior">对于此命令控制事务的创建。</param>
            <param name="sql">命令字符串。</param>
            <param name="parameters">要应用于命令字符串的参数。</param>
            <returns>执行命令后由数据库返回的结果。</returns>
        </member>
        <member name="M:OSharp.Core.Data.IUnitOfWork.SqlQuery``1(System.String,System.Object[])">
            <summary>
            创建一个原始 SQL 查询，该查询将返回给定泛型类型的元素。 类型可以是包含与从查询返回的列名匹配的属性的任何类型，也可以是简单的基元类型。 该类型不必是实体类型。
             即使返回对象的类型是实体类型，上下文也决不会跟踪此查询的结果。 使用 SqlQuery(String, Object[]) 方法可返回上下文跟踪的实体。 
            与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。 您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。 
            您提供的任何参数值都将自动转换为 DbParameter。 unitOfWork.SqlQuery&lt;Post&gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 
            或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。 这允许您在 SQL 查询字符串中使用命名参数。 unitOfWork.SqlQuery&lt;Post&gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
            </summary>
            <typeparam name="TElement">查询所返回对象的类型。</typeparam>
            <param name="sql">SQL 查询字符串。</param>
            <param name="parameters">要应用于 SQL 查询字符串的参数。 如果使用输出参数，则它们的值在完全读取结果之前不可用。 这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Data.IUnitOfWork.SqlQuery(System.Type,System.String,System.Object[])">
            <summary>
            创建一个原始 SQL 查询，该查询将返回给定类型的元素。 类型可以是包含与从查询返回的列名匹配的属性的任何类型，也可以是简单的基元类型。 该类型不必是实体类型。 即使返回对象的类型是实体类型，上下文也决不会跟踪此查询的结果。 使用 SqlQuery(String, Object[]) 方法可返回上下文跟踪的实体。 与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。 您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。 您提供的任何参数值都将自动转换为 DbParameter。 context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); 或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。 这允许您在 SQL 查询字符串中使用命名参数。 context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
            </summary>
            <param name="elementType">查询所返回对象的类型。</param>
            <param name="sql">SQL 查询字符串。</param>
            <param name="parameters">要应用于 SQL 查询字符串的参数。 如果使用输出参数，则它们的值在完全读取结果之前不可用。 这是由于 DbDataReader 的基础行为而导致的，有关详细信息，请参见 http://go.microsoft.com/fwlink/?LinkID=398589。</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Data.IUnitOfWork.SaveChanges">
            <summary>
            提交当前单元操作的更改。
            </summary>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:OSharp.Core.Data.IUnitOfWork.ExecuteSqlCommandAsync(OSharp.Core.Data.TransactionalBehavior,System.String,System.Object[])">
            <summary>
            对数据库执行给定的 DDL/DML 命令。 
            与接受 SQL 的任何 API 一样，对任何用户输入进行参数化以便避免 SQL 注入攻击是十分重要的。 您可以在 SQL 查询字符串中包含参数占位符，然后将参数值作为附加参数提供。 
            您提供的任何参数值都将自动转换为 DbParameter。 unitOfWork.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); 
            或者，您还可以构造一个 DbParameter 并将它提供给 SqlQuery。 这允许您在 SQL 查询字符串中使用命名参数。 unitOfWork.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
            </summary>
            <param name="transactionalBehavior">对于此命令控制事务的创建。</param>
            <param name="sql">命令字符串。</param>
            <param name="paramters">要应用于命令字符串的参数。</param>
            <returns>执行命令后由数据库返回的结果。</returns>
        </member>
        <member name="M:OSharp.Core.Data.IUnitOfWork.SaveChangesAsync">
            <summary>
            异步提交当前单元操作的更改。
            </summary>
            <returns>操作影响的行数</returns>
        </member>
        <member name="T:OSharp.Core.Data.TransactionalBehavior">
            <summary>
            在执行数据库命令或查询期间控制事务创建行为。
            </summary>
        </member>
        <member name="F:OSharp.Core.Data.TransactionalBehavior.DoNotEnsureTransaction">
            <summary>
            如果存在现有事务，则使用它，否则在没有事务的情况下执行命令或查询。
            </summary>
        </member>
        <member name="F:OSharp.Core.Data.TransactionalBehavior.EnsureTransaction">
            <summary>
            如果不存在任何事务，则使用新事务进行操作。
            </summary>
        </member>
        <member name="T:OSharp.Core.Dependency.ActivatorUtilities">
            <summary>
            创建实例辅助操作
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ActivatorUtilities.CreateInstance(System.IServiceProvider,System.Type,System.Object[])">
            <summary>
            从服务提供者中创建指定类型与构造参数的实例
            </summary>
            <param name="provider">服务提供者</param>
            <param name="instanceType">指定类型</param>
            <param name="parameters">构造参数</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ActivatorUtilities.CreateInstance``1(System.IServiceProvider,System.Object[])">
            <summary>
            从服务提供者中创建指定类型与构造参数的实例
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="provider">服务提供者</param>
            <param name="paramters">构造参数</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ActivatorUtilities.CreateFactory(System.Type,System.Type[])">
            <summary>
            创建获取指定类型实例的委托
            </summary>
            <param name="instanceType">指定类型</param>
            <param name="argumentTypes">构造参数</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ActivatorUtilities.GetServiceOrCreateInstance``1(System.IServiceProvider)">
            <summary>
            获取或创建指定类型的实例
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="provider">服务提供者</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ActivatorUtilities.GetServiceOrCreateInstance(System.IServiceProvider,System.Type)">
            <summary>
            获取或创建指定类型的实例
            </summary>
            <param name="provider">服务提供者</param>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Dependency.IIocBuilder">
            <summary>
            定义依赖注入构建器，解析依赖注入服务映射信息进行构建
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.IIocBuilder.ServiceProvider">
            <summary>
            获取 服务提供者
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.IIocBuilder.Build">
            <summary>
            开始构建依赖注入映射
            </summary>
            <returns>服务提供者</returns>
        </member>
        <member name="T:OSharp.Core.Dependency.IIocResolver">
            <summary>
            依赖注入对象解析获取器
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.IIocResolver.Resolve``1">
            <summary>
            获取指定类型的实例
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.IIocResolver.Resolve(System.Type)">
            <summary>
            获取指定类型的实例
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.IIocResolver.Resolves``1">
            <summary>
            获取指定类型的所有实例
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.IIocResolver.Resolves(System.Type)">
            <summary>
            获取指定类型的所有实例
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Dependency.IocBuilderBase">
            <summary>
            依赖注入构建器基类，从程序集中反射进行依赖注入接口与实现的注册
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.IocBuilderBase.#ctor(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Dependency.IocBuilderBase"/>类型的新实例
            </summary>
            <param name="services">服务信息集合</param>
        </member>
        <member name="P:OSharp.Core.Dependency.IocBuilderBase.AssemblyFinder">
            <summary>
            获取或设置 程序集查找器
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.IocBuilderBase.ServiceProvider">
            <summary>
            获取 服务提供者
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.IocBuilderBase.Build">
            <summary>
            开始构建依赖注入映射
            </summary>
            <returns>服务提供者</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.IocBuilderBase.AddCustomTypes(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            添加自定义服务映射
            </summary>
            <param name="services">服务信息集合</param>
        </member>
        <member name="M:OSharp.Core.Dependency.IocBuilderBase.BuildAndSetResolver(OSharp.Core.Dependency.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            重写以实现构建服务并设置各个平台的Resolver
            </summary>
            <param name="services">服务映射信息集合</param>
            <param name="assemblies">要检索的程序集集合</param>
            <returns>服务提供者</returns>
        </member>
        <member name="T:OSharp.Core.Dependency.IServiceCollection">
            <summary>
            定义服务映射信息集合，用于装载注册类型映射的描述信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.IServiceCollection.Clone">
            <summary>
            克隆创建当前集合的副本
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Dependency.ISingletonDependency">
            <summary>
            实现此接口的类型将被注册为<see cref="F:OSharp.Core.Dependency.LifetimeStyle.Singleton"/>模式
            </summary>
        </member>
        <member name="T:OSharp.Core.Dependency.ITransientDependency">
            <summary>
            实现此接口的类型将自动注册为<see cref="F:OSharp.Core.Dependency.LifetimeStyle.Transient"/>模式
            </summary>
        </member>
        <member name="T:OSharp.Core.Dependency.IScopeDependency">
            <summary>
            实现此接口的类型将被注册为<see cref="F:OSharp.Core.Dependency.LifetimeStyle.Scoped"/>模式
            </summary>
        </member>
        <member name="T:OSharp.Core.Dependency.ObjectFactory">
            <summary>
            对象创建委托
            </summary>
            <param name="provider">服务提供者</param>
            <param name="args">构造函数的参数</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Dependency.ScopeDependencyTypeFinder">
            <summary>
            <see cref="T:OSharp.Core.Dependency.IScopeDependency"/>接口实现类查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ScopeDependencyTypeFinder.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Dependency.ScopeDependencyTypeFinder"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.ScopeDependencyTypeFinder.AssemblyFinder">
            <summary>
            获取或设置 程序集查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ScopeDependencyTypeFinder.Find(System.Func{System.Type,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ScopeDependencyTypeFinder.FindAll">
            <summary>
            查找所有项
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Dependency.IocServiceProvider">
            <summary>
            默认IoC服务提供者实现
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.IocServiceProvider.#ctor(OSharp.Core.Dependency.IIocResolver)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Dependency.IocServiceProvider"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.IocServiceProvider.GetService(System.Type)">
            <summary>
            获取指定类型的服务对象。
            </summary>
            <returns>
            <paramref name="serviceType"/> 类型的服务对象。 - 或 - 如果没有 <paramref name="serviceType"/> 类型的服务对象，则为 null。
            </returns>
            <param name="serviceType">一个对象，它指定要获取的服务对象的类型。</param><filterpriority>2</filterpriority>
        </member>
        <member name="T:OSharp.Core.Dependency.ServiceBuildOptions">
            <summary>
            服务创建配置信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceBuildOptions.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Dependency.ServiceBuildOptions"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.ServiceBuildOptions.AssemblyFinder">
            <summary>
            获取或设置 程序集查找器
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.ServiceBuildOptions.TransientTypeFinder">
            <summary>
            获取或设置 即时生命周期依赖类型查找器
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.ServiceBuildOptions.ScopeTypeFinder">
            <summary>
            获取或设置 范围生命周期依赖类型查找器
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.ServiceBuildOptions.SingletonTypeFinder">
            <summary>
            获取或设置 单例生命周期依赖类型查找器
            </summary>
        </member>
        <member name="T:OSharp.Core.Dependency.ServicesBuilder">
            <summary>
            服务器映射集合创建功能
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServicesBuilder.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Dependency.ServicesBuilder"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServicesBuilder.#ctor(OSharp.Core.Dependency.ServiceBuildOptions)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Dependency.ServicesBuilder"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServicesBuilder.Build">
            <summary>
            将当前服务创建为
            </summary>
            <returns>服务映射集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServicesBuilder.AddTypeWithInterfaces(OSharp.Core.Dependency.IServiceCollection,System.Type[],OSharp.Core.Dependency.LifetimeStyle)">
            <summary>
            以类型实现的接口进行服务添加，需排除
            <see cref="T:OSharp.Core.Dependency.ITransientDependency"/>、
            <see cref="T:OSharp.Core.Dependency.IScopeDependency"/>、
            <see cref="T:OSharp.Core.Dependency.ISingletonDependency"/>、
            <see cref="T:OSharp.Core.Dependency.IDependency"/>、
            <see cref="T:System.IDisposable"/>等非业务接口，如无接口则注册自身
            </summary>
            <param name="services">服务映射信息集合</param>
            <param name="implementationTypes">要注册的实现类型集合</param>
            <param name="lifetime">注册的生命周期类型</param>
        </member>
        <member name="M:OSharp.Core.Dependency.ServicesBuilder.AddGlobalTypes(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            重写以实现添加全局特殊类型映射
            </summary>
            <param name="services">服务映射信息集合</param>
        </member>
        <member name="T:OSharp.Core.Dependency.ServiceCollection">
            <summary>
            依赖注入服务映射信息集合
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollection.Add(OSharp.Core.Dependency.ServiceDescriptor)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollection.Contains(OSharp.Core.Dependency.ServiceDescriptor)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollection.CopyTo(OSharp.Core.Dependency.ServiceDescriptor[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollection.Remove(OSharp.Core.Dependency.ServiceDescriptor)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:OSharp.Core.Dependency.ServiceCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:OSharp.Core.Dependency.ServiceCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollection.IndexOf(OSharp.Core.Dependency.ServiceDescriptor)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollection.Insert(System.Int32,OSharp.Core.Dependency.ServiceDescriptor)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="P:OSharp.Core.Dependency.ServiceCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:OSharp.Core.Dependency.ServiceCollectionExtensions">
            <summary>
            服务集合扩展辅助操作
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddTransient(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Type)">
            <summary>
            注册即时生命周期类型的映射信息
            </summary>
            <param name="collection">服务映射信息集合</param>
            <param name="serviceType">服务类型</param>
            <param name="implementationType">服务实现类型</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddTransient(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
            注册即时生命周期类型的映射信息
            </summary>
            <param name="collection">服务映射信息集合</param>
            <param name="serviceType">服务类型</param>
            <param name="factory">服务实现类型实例工厂</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddTransient(OSharp.Core.Dependency.IServiceCollection,System.Type)">
            <summary>
            注册即时生命周期类型的映射信息
            </summary>
            <param name="collection">服务映射信息集合</param>
            <param name="serviceType">服务类型</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddTransient``2(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            注册即时生命周期类型的映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">服务实现类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddTransient``1(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            注册即时生命周期类型的映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddTransient``1(OSharp.Core.Dependency.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            注册即时生命周期类型的映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <param name="factory">服务实现类型实例工厂</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddTransient``2(OSharp.Core.Dependency.IServiceCollection,System.Func{System.IServiceProvider,``1})">
            <summary>
            注册即时生命周期类型的映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">服务实现类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <param name="factory">服务实现类型实例工厂</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddScoped(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Type)">
            <summary>
            注册范围生命周期类型的映射信息
            </summary>
            <param name="collection">服务映射信息集合</param>
            <param name="serviceType">服务类型</param>
            <param name="implementationType">服务实现类型</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddScoped(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
            注册范围生命周期类型的映射信息
            </summary>
            <param name="collection">服务映射信息集合</param>
            <param name="serviceType">服务类型</param>
            <param name="factory">服务实现类型实例工厂</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddScoped(OSharp.Core.Dependency.IServiceCollection,System.Type)">
            <summary>
            注册范围生命周期类型的映射信息
            </summary>
            <param name="collection">服务映射信息集合</param>
            <param name="serviceType">服务类型</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddScoped``2(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            注册范围生命周期类型的映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">服务实现类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddScoped``1(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            注册范围生命周期类型的映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddScoped``1(OSharp.Core.Dependency.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            注册范围生命周期类型的映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <param name="factory">服务实现类型实例工厂</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddScoped``2(OSharp.Core.Dependency.IServiceCollection,System.Func{System.IServiceProvider,``1})">
            <summary>
            注册范围生命周期类型的映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">服务实现类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <param name="factory">服务实现类型实例工厂</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddSingleton(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Type)">
            <summary>
            注册单例生命周期类型的映射信息
            </summary>
            <param name="collection">服务映射信息集合</param>
            <param name="serviceType">服务类型</param>
            <param name="implementationType">服务实现类型</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddSingleton(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
            注册单例生命周期类型的映射信息
            </summary>
            <param name="collection">服务映射信息集合</param>
            <param name="serviceType">服务类型</param>
            <param name="factory">服务实现类型实例工厂</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddSingleton(OSharp.Core.Dependency.IServiceCollection,System.Type)">
            <summary>
            注册单例生命周期类型的映射信息
            </summary>
            <param name="collection">服务映射信息集合</param>
            <param name="serviceType">服务类型</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddSingleton``2(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            注册单例生命周期类型的映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">服务实现类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddSingleton``1(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            注册单例生命周期类型的映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddSingleton``1(OSharp.Core.Dependency.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            注册单例生命周期类型的映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <param name="factory">服务实现类型实例工厂</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddSingleton``2(OSharp.Core.Dependency.IServiceCollection,System.Func{System.IServiceProvider,``1})">
            <summary>
            注册单例生命周期类型的映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">服务实现类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <param name="factory">服务实现类型实例工厂</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddInstance``1(OSharp.Core.Dependency.IServiceCollection,``0)">
            <summary>
            注册单例生命周期的实例映射信息
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <param name="collection">服务映射信息集合</param>
            <param name="instance">服务实现类型实例</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddInstance(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Object)">
            <summary>
            注册单例生命周期的实例映射信息
            </summary>
            <param name="collection">服务映射信息集合</param>
            <param name="serviceType">服务类型</param>
            <param name="instance">服务实现类型实例</param>
            <returns>服务映射信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.Add(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Type,OSharp.Core.Dependency.LifetimeStyle)">
            <summary>
            注册指定生命周期类型的映射信息
            </summary>
            <param name="collection">服务映射信息集合</param>
            <param name="serviceType">服务类型</param>
            <param name="implementationType">服务实现类型</param>
            <param name="lifetime">生命周期类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddDescriptor(OSharp.Core.Dependency.IServiceCollection,OSharp.Core.Dependency.ServiceDescriptor)">
            <summary>
            将映射描述直接添加到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="descriptor">服务映射信息</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.AddDescriptors(OSharp.Core.Dependency.IServiceCollection,System.Collections.Generic.IEnumerable{OSharp.Core.Dependency.ServiceDescriptor})">
            <summary>
            将多个映射描述直接添加到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="descriptors">多个服务映射信息</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAdd(OSharp.Core.Dependency.IServiceCollection,OSharp.Core.Dependency.ServiceDescriptor)">
            <summary>
            尝试将映射描述添加到服务映射集合中，存在则不添加
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="descriptor">服务映射信息</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAdd(OSharp.Core.Dependency.IServiceCollection,System.Collections.Generic.IEnumerable{OSharp.Core.Dependency.ServiceDescriptor})">
            <summary>
            尝试将多个映射描述添加到服务映射集合中，存在则路过
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="descriptors">多个服务映射信息</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddTransient(OSharp.Core.Dependency.IServiceCollection,System.Type)">
            <summary>
            创建即时类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="serviceType">服务类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddTransient(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Type)">
            <summary>
            创建即时类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="serviceType">服务类型</param>
            <param name="implementationType">服务实现类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddTransient(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
            创建即时类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="serviceType">服务类型</param>
            <param name="factory">服务实现类型实例工厂</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddTransient``1(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            创建即时类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <typeparam name="TService">服务类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddTransient``2(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            创建即时类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">服务实现类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddScoped(OSharp.Core.Dependency.IServiceCollection,System.Type)">
            <summary>
            创建范围类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="serviceType">服务类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddScoped(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Type)">
            <summary>
            创建范围类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="serviceType">服务类型</param>
            <param name="implementationType">服务实现类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddScoped(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
            创建范围类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="serviceType">服务类型</param>
            <param name="factory">服务实现类型实例工厂</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddScoped``1(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            创建范围类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <typeparam name="TService">服务类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddScoped``2(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            创建范围类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">服务实现类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddSingleton(OSharp.Core.Dependency.IServiceCollection,System.Type)">
            <summary>
            创建单例类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="serviceType">服务类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddSingleton(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Type)">
            <summary>
            创建单例类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="serviceType">服务类型</param>
            <param name="implementationType">服务实现类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddSingleton(OSharp.Core.Dependency.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
            创建单例类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="serviceType">服务类型</param>
            <param name="factory">服务实现类型实例工厂</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddSingleton``1(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            创建单例类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <typeparam name="TService">服务类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.TryAddSingleton``2(OSharp.Core.Dependency.IServiceCollection)">
            <summary>
            创建单例类型的映射并尝试到服务映射集合中
            </summary>
            <param name="collection">服务映射集合</param>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">服务实现类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceCollectionExtensions.Replace(OSharp.Core.Dependency.IServiceCollection,OSharp.Core.Dependency.ServiceDescriptor)">
            <summary>
            替换服务集合中已经存在的映射信息
            </summary>
            <param name="collection">服务映射集合</param>
            <param name="descriptor">映射信息</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Dependency.ServiceDescriptor">
            <summary>
            依赖注入映射描述信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.#ctor(System.Type,System.Type,OSharp.Core.Dependency.LifetimeStyle)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Dependency.ServiceDescriptor"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.#ctor(System.Type,System.Object)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Dependency.ServiceDescriptor"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.#ctor(System.Type,System.Func{System.IServiceProvider,System.Object},OSharp.Core.Dependency.LifetimeStyle)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Dependency.ServiceDescriptor"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.#ctor(System.Type,OSharp.Core.Dependency.LifetimeStyle)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Dependency.ServiceDescriptor"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.ServiceDescriptor.Lifetime">
            <summary>
            获取 生命周期类型的描述
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.ServiceDescriptor.ServiceType">
            <summary>
            获取 服务类型
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.ServiceDescriptor.ImplementationType">
            <summary>
            获取 服务实现类型
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.ServiceDescriptor.ImplementationInstance">
            <summary>
            获取 服务实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.ServiceDescriptor.ImplementationFactory">
            <summary>
            获取 服务实例创建工厂
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Transient``2">
            <summary>
            创建即时生命周期类型的描述
            </summary>
            <typeparam name="TService">服务类型</typeparam>
            <typeparam name="TImplementation">服务实现类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Transient(System.Type,System.Type)">
            <summary>
            创建即时生命周期类型的描述
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="implementationType">服务实现类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Transient``2(System.Func{System.IServiceProvider,``1})">
            <summary>
            创建即时生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Transient``1(System.Func{System.IServiceProvider,``0})">
            <summary>
            创建即时生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Transient(System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
            创建即时生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Scoped``2">
            <summary>
            创建局部生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Scoped(System.Type,System.Type)">
            <summary>
            创建局部生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Scoped``2(System.Func{System.IServiceProvider,``1})">
            <summary>
            创建局部生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Scoped``1(System.Func{System.IServiceProvider,``0})">
            <summary>
            创建局部生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Scoped(System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
            创建局部生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Singleton``2">
            <summary>
            创建单例生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Singleton(System.Type,System.Type)">
            <summary>
            创建单例生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Singleton``2(System.Func{System.IServiceProvider,``1})">
            <summary>
            创建单例生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Singleton``1(System.Func{System.IServiceProvider,``0})">
            <summary>
            创建单例生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Singleton(System.Type,System.Func{System.IServiceProvider,System.Object})">
            <summary>
            创建单例生命周期类型的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Instance``1(``0)">
            <summary>
            创建单例生命周期实例的描述
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceDescriptor.Instance(System.Type,System.Object)">
            <summary>
            创建单例生命周期实例的描述
            </summary>
        </member>
        <member name="T:OSharp.Core.Dependency.ServiceProviderExtensions">
            <summary>
            服务提供者扩展辅助操作
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceProviderExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            获取指定类型服务的实例
            </summary>
            <typeparam name="T">要获取实例的服务类型</typeparam>
            <param name="provider">服务提供者</param>
            <returns>指定类型的实例</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceProviderExtensions.GetRequiredService(System.IServiceProvider,System.Type)">
            <summary>
            获取指定类型服务的非空实例
            </summary>
            <param name="provider">服务提供者</param>
            <param name="serviceType">要获取实例的服务类型</param>
            <returns>指定类型的非空实例</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceProviderExtensions.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            获取指定类型服务的非空实例
            </summary>
            <typeparam name="T">要获取实例的服务类型</typeparam>
            <param name="provider">服务提供者</param>
            <returns>指定类型的非空实例</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceProviderExtensions.GetServices``1(System.IServiceProvider)">
            <summary>
            获取指定类型服务的所有实例
            </summary>
            <typeparam name="T">要获取实例的服务类型</typeparam>
            <param name="provider">服务提供者</param>
            <returns>指定类型的所有实例</returns>
        </member>
        <member name="M:OSharp.Core.Dependency.ServiceProviderExtensions.GetServices(System.IServiceProvider,System.Type)">
            <summary>
            获取指定类型服务的所有实例
            </summary>
            <param name="provider">服务提供者</param>
            <param name="serviceType">要获取实例的服务类型</param>
            <returns>指定类型的所有实例</returns>
        </member>
        <member name="T:OSharp.Core.Dependency.IServicesBuilder">
            <summary>
            定义服务器映射集合创建功能
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.IServicesBuilder.Build">
            <summary>
            将当前服务创建为
            </summary>
            <returns>服务映射集合</returns>
        </member>
        <member name="T:OSharp.Core.Dependency.SingletonDependencyTypeFinder">
            <summary>
            <see cref="T:OSharp.Core.Dependency.ISingletonDependency"/>接口实现类查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.SingletonDependencyTypeFinder.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Dependency.SingletonDependencyTypeFinder"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.SingletonDependencyTypeFinder.AssemblyFinder">
            <summary>
            获取或设置 程序集查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.SingletonDependencyTypeFinder.Find(System.Func{System.Type,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.SingletonDependencyTypeFinder.FindAll">
            <summary>
            查找所有项
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Dependency.TransientDependencyTypeFinder">
            <summary>
            <see cref="T:OSharp.Core.Dependency.ITransientDependency"/>接口实现类查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.TransientDependencyTypeFinder.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Dependency.TransientDependencyTypeFinder"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Dependency.TransientDependencyTypeFinder.AssemblyFinder">
            <summary>
            获取或设置 程序集查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Dependency.TransientDependencyTypeFinder.Find(System.Func{System.Type,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Dependency.TransientDependencyTypeFinder.FindAll">
            <summary>
            查找所有项
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Dependency.IDependency">
            <summary>
            依赖注入接口，表示该接口的实现类将自动注册到IoC容器中
            </summary>
        </member>
        <member name="T:OSharp.Core.Dependency.LifetimeStyle">
            <summary>
            表示依赖注入的对象生命周期
            </summary>
        </member>
        <member name="F:OSharp.Core.Dependency.LifetimeStyle.Transient">
            <summary>
            实时模式，每次获取都创建不同对象
            </summary>
        </member>
        <member name="F:OSharp.Core.Dependency.LifetimeStyle.Scoped">
            <summary>
            局部模式，同一生命周期获得相同对象，不同生命周期获得不同对象（PerRequest）
            </summary>
        </member>
        <member name="F:OSharp.Core.Dependency.LifetimeStyle.Singleton">
            <summary>
            单例模式，在第一次获取实例时创建，之后都获得相同对象
            </summary>
        </member>
        <member name="T:OSharp.Core.Extensions.CacheExtensions">
            <summary>
            缓存扩展辅助操作类
            </summary>
        </member>
        <member name="M:OSharp.Core.Extensions.CacheExtensions.Set(OSharp.Core.Caching.ICache,System.String,System.Object,OSharp.Core.Security.IFunction)">
            <summary>
            根据功能配置添加缓存数据
            </summary>
        </member>
        <member name="T:OSharp.Core.Extensions.ClaimsIdentityExtensions">
            <summary>
            <see cref="T:System.Security.Claims.ClaimsIdentity"/>扩展操作类
            </summary>
        </member>
        <member name="M:OSharp.Core.Extensions.ClaimsIdentityExtensions.GetClaimValue(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            获取指定类型的Claim值
            </summary>
        </member>
        <member name="T:OSharp.Core.Initialize.DataLoggingInitializer">
            <summary>
            数据日志初始化器，用于初始化数据日志功能
            </summary>
        </member>
        <member name="M:OSharp.Core.Initialize.DataLoggingInitializer.Initialize(OSharp.Core.Configs.DataLoggingConfig)">
            <summary>
            开始初始化数据日志
            </summary>
            <param name="config">数据日志配置信息</param>
        </member>
        <member name="T:OSharp.Core.Initialize.IBasicLoggingInitializer">
            <summary>
            定义基础日志初始化器，用于初始化基础日志功能
            </summary>
        </member>
        <member name="M:OSharp.Core.Initialize.IBasicLoggingInitializer.Initialize(OSharp.Core.Configs.LoggingConfig)">
            <summary>
            开始初始化基础日志
            </summary>
            <param name="config">日志配置信息</param>
        </member>
        <member name="T:OSharp.Core.Initialize.IDataHandlerInitializer">
            <summary>
            定义数据处理初始化器，反射程序集进行功能信息，实体信息的数据初始化
            </summary>
        </member>
        <member name="M:OSharp.Core.Initialize.IDataHandlerInitializer.Initialize">
            <summary>
            执行数据处理初始化
            </summary>
        </member>
        <member name="T:OSharp.Core.Initialize.IDataLoggingInitializer">
            <summary>
            定义数据日志初始化器，用于初始化数据日志功能
            </summary>
        </member>
        <member name="M:OSharp.Core.Initialize.IDataLoggingInitializer.Initialize(OSharp.Core.Configs.DataLoggingConfig)">
            <summary>
            开始初始化数据日志
            </summary>
            <param name="config">数据日志配置信息</param>
        </member>
        <member name="T:OSharp.Core.Initialize.IDatabaseInitializer">
            <summary>
            定义数据库初始化器，从程序集中反射实体映射类并加载到相应上下文类中，进行上下文类型的初始化
            </summary>
        </member>
        <member name="M:OSharp.Core.Initialize.IDatabaseInitializer.Initialize(OSharp.Core.Configs.DataConfig)">
            <summary>
            开始初始化数据库
            </summary>
            <param name="config">数据库配置信息</param>
        </member>
        <member name="T:OSharp.Core.Initialize.LoggingInitializerBase">
            <summary>
            日志初始化器基类
            </summary>
        </member>
        <member name="P:OSharp.Core.Initialize.LoggingInitializerBase.ServiceProvider">
            <summary>
            获取或设置 服务提供者
            </summary>
        </member>
        <member name="M:OSharp.Core.Initialize.LoggingInitializerBase.SetLoggingFromAdapterConfig(OSharp.Core.Configs.LoggingAdapterConfig)">
            <summary>
            从日志适配器配置节点初始化日志适配器
            </summary>
            <param name="config">日志适配器配置节点</param>
        </member>
        <member name="T:OSharp.Core.FrameworkInitializer">
            <summary>
            框架初始化
            </summary>
        </member>
        <member name="M:OSharp.Core.FrameworkInitializer.Initialize(OSharp.Core.Dependency.IIocBuilder)">
            <summary>
            开始执行框架初始化
            </summary>
            <param name="iocBuilder">依赖注入构建器</param>
        </member>
        <member name="T:OSharp.Core.IFrameworkInitializer">
            <summary>
            框架初始化接口
            </summary>
        </member>
        <member name="M:OSharp.Core.IFrameworkInitializer.Initialize(OSharp.Core.Dependency.IIocBuilder)">
            <summary>
            开始执行框架初始化
            </summary>
            <param name="iocBuilder">依赖注入构建器</param>
        </member>
        <member name="T:OSharp.Core.Mapping.IMapper">
            <summary>
            定义对象映射功能
            </summary>
        </member>
        <member name="M:OSharp.Core.Mapping.IMapper.MapTo``1(System.Object)">
            <summary>
            将对象映射为指定类型
            </summary>
            <typeparam name="TTarget">要映射的目标类型</typeparam>
            <param name="source">源对象</param>
            <returns>目标类型的对象</returns>
        </member>
        <member name="M:OSharp.Core.Mapping.IMapper.MapTo``2(``0,``1)">
            <summary>
            使用源类型的对象更新目标类型的对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">待更新的目标对象</param>
            <returns>更新后的目标类型对象</returns>
        </member>
        <member name="T:OSharp.Core.Mapping.IMappersBuilder">
            <summary>
            定义对象映射构造器
            </summary>
        </member>
        <member name="M:OSharp.Core.Mapping.IMappersBuilder.Build(System.Collections.Generic.IEnumerable{OSharp.Core.Mapping.IMapTuple})">
            <summary>
            执行对象映射构造
            </summary>
            <param name="mapTuples">对象映射源-目标查找器配对信息集合</param>
        </member>
        <member name="T:OSharp.Core.Mapping.IMapSourceTypeFinder">
            <summary>
            定义对象映射源类型查找器
            </summary>
        </member>
        <member name="T:OSharp.Core.Mapping.IMapTargetTypeFinder">
            <summary>
            定义对象映射目标类型查找器
            </summary>
        </member>
        <member name="T:OSharp.Core.Mapping.IMapTuple">
            <summary>
            定义对象映射源与目标配对
            </summary>
        </member>
        <member name="M:OSharp.Core.Mapping.IMapTuple.Build">
            <summary>
            执行对象映射构造
            </summary>
        </member>
        <member name="T:OSharp.Core.Mapping.InputDtoTypeFinder">
            <summary>
            输入DTO类型查找器 
            </summary>
        </member>
        <member name="P:OSharp.Core.Mapping.InputDtoTypeFinder.AssemblyFinder">
            <summary>
            获取或设置 所有程序集查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Mapping.InputDtoTypeFinder.Find(System.Func{System.Type,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Mapping.InputDtoTypeFinder.FindAll">
            <summary>
            查找所有项
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Mapping.MappersBuilder">
            <summary>
            对象映射构造器
            </summary>
        </member>
        <member name="M:OSharp.Core.Mapping.MappersBuilder.Build(System.Collections.Generic.IEnumerable{OSharp.Core.Mapping.IMapTuple})">
            <summary>
            执行对象映射构造
            </summary>
            <param name="mapTuples">对象映射源-目标查找器配对信息集合</param>
        </member>
        <member name="T:OSharp.Core.Mapping.MapperExtensions">
            <summary>
            对象映射扩展操作
            </summary>
        </member>
        <member name="M:OSharp.Core.Mapping.MapperExtensions.SetMaper(OSharp.Core.Mapping.IMapper)">
            <summary>
            设置对象映射执行者
            </summary>
            <param name="mapper">映射执行者</param>
        </member>
        <member name="M:OSharp.Core.Mapping.MapperExtensions.MapTo``1(System.Object)">
            <summary>
            将对象映射为指定类型
            </summary>
            <typeparam name="TTarget">要映射的目标类型</typeparam>
            <param name="source">源对象</param>
            <returns>目标类型的对象</returns>
        </member>
        <member name="M:OSharp.Core.Mapping.MapperExtensions.MapTo``2(``0,``1)">
            <summary>
            使用源类型的对象更新目标类型的对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">待更新的目标对象</param>
            <returns>更新后的目标类型对象</returns>
        </member>
        <member name="M:OSharp.Core.Mapping.MapperExtensions.CheckMapper">
            <summary>
            验证映射执行者是否为空
            </summary>
        </member>
        <member name="T:OSharp.Core.Mapping.MapTupleBase`2">
            <summary>
            对象映射源与目标配对基类
            </summary>
            <typeparam name="TSourceTypeFinder">源类型查找器类型</typeparam>
            <typeparam name="TTargetTypeFinder">目标类型查找器类型</typeparam>
        </member>
        <member name="P:OSharp.Core.Mapping.MapTupleBase`2.SourceTypeFinder">
            <summary>
            获取或设置 源类型查找器
            </summary>
        </member>
        <member name="P:OSharp.Core.Mapping.MapTupleBase`2.TargetTypeFinder">
            <summary>
            获取或设置 目标类型查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Mapping.MapTupleBase`2.Build">
            <summary>
            执行对象映射构造
            </summary>
        </member>
        <member name="M:OSharp.Core.Mapping.MapTupleBase`2.IsMatch(System.Type,System.Type)">
            <summary>
            重写以定义源类型与目标类型的匹配规则
            </summary>
            <param name="sourceType">源类型</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Mapping.MapTupleBase`2.CreateMapper(System.Type,System.Type)">
            <summary>
            重写以实现映射类型的创建
            </summary>
            <param name="sourceType">源类型</param>
            <param name="targetType">目标类型</param>
        </member>
        <member name="T:OSharp.Core.Mapping.OutputDtoTypeFinder">
            <summary>
            输出DTO类型查找器 
            </summary>
        </member>
        <member name="P:OSharp.Core.Mapping.OutputDtoTypeFinder.AssemblyFinder">
            <summary>
            获取或设置 所有程序集查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Mapping.OutputDtoTypeFinder.Find(System.Func{System.Type,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Mapping.OutputDtoTypeFinder.FindAll">
            <summary>
            查找所有项
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Reflection.DirectoryAssemblyFinder">
            <summary>
            目录程序集查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Reflection.DirectoryAssemblyFinder.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Reflection.DirectoryAssemblyFinder"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Reflection.DirectoryAssemblyFinder.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Reflection.DirectoryAssemblyFinder"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Reflection.DirectoryAssemblyFinder.Find(System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Reflection.DirectoryAssemblyFinder.FindAll">
            <summary>
            查找所有项
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Reflection.IAllAssemblyFinder">
            <summary>
            定义所有程序集查找器
            </summary>
        </member>
        <member name="T:OSharp.Core.Reflection.IAssemblyFinder">
            <summary>
            定义程序集查找器
            </summary>
        </member>
        <member name="T:OSharp.Core.Reflection.IFinder`1">
            <summary>
            定义一个查找器
            </summary>
            <typeparam name="TItem">要查找的项类型</typeparam>
        </member>
        <member name="M:OSharp.Core.Reflection.IFinder`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Reflection.IFinder`1.FindAll">
            <summary>
            查找所有项
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Reflection.IMethodInfoFinder">
            <summary>
            定义方法信息查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Reflection.IMethodInfoFinder.Find(System.Type,System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            查找指定条件的方法信息
            </summary>
            <param name="type">控制器类型</param>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Reflection.IMethodInfoFinder.FindAll(System.Type)">
            <summary>
            从指定类型查找方法信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Reflection.ITypeFinder">
            <summary>
            定义类型查找行为
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.EntityInfoBaseInputDto`1">
            <summary>
            实体信息输入DTO基类
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoBaseInputDto`1.Id">
            <summary>
            获取或设置 主键，唯一标识
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoBaseInputDto`1.ClassName">
            <summary>
            获取 实体数据显示名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoBaseInputDto`1.Name">
            <summary>
            获取 实体数据类型名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoBaseInputDto`1.DataLogEnabled">
            <summary>
            获取 是否启用数据日志
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.FunctionBaseInputDto`1">
            <summary>
            功能信息输入DTO基类
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.Id">
            <summary>
            获取或设置 主键，唯一标识
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.Name">
            <summary>
            获取 功能名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.Url">
            <summary>
            获取 功能地址
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.FunctionType">
            <summary>
            获取 功能类型
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.Area">
            <summary>
            获取或设置 区域名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.Controller">
            <summary>
            获取或设置 控制器名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.Action">
            <summary>
            获取或设置 功能名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.IsController">
            <summary>
            获取或设置 是否控制器，如果为false，则此记录为action的记录
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.OperateLogEnabled">
            <summary>
            获取 是否启用操作日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.DataLogEnabled">
            <summary>
            获取 是否启用数据日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.CacheExpirationSeconds">
            <summary>
            获取或设置 数据缓存时间（秒）
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.IsCacheSliding">
            <summary>
            获取或设置 是否相对过期时间，否则为绝对过期
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.IsAjax">
            <summary>
            获取或设置 是否Ajax记录
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.IsChild">
            <summary>
            获取或设置 是否子功能
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBaseInputDto`1.IsLocked">
            <summary>
            获取或设置 是否锁定
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.IEntityTypeFinder">
            <summary>
            定义实体类型查找
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.IFunctionMethodInfoFinder">
            <summary>
            定义功能信息方法查找器
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.IFunctionTypeFinder">
            <summary>
            定义功能信息类型查找器
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.NullFunctionHandler">
            <summary>
            空的功能信息处理器
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.NullFunctionHandler.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Security.NullFunctionHandler"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.NullFunctionHandler.PlatformToken">
            <summary>
            获取 功能技术提供者，如Mvc/WebApi/SignalR等，用于区分功能来源，各技术更新功能时，只更新属于自己技术的功能
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.NullFunctionHandler.GetFunction(System.Type)">
            <summary>
            重写以实现从类型信息创建功能信息
            </summary>
            <param name="type">类型信息</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Security.NullFunctionHandler.GetFunction(System.Reflection.MethodInfo)">
            <summary>
            重写以实现从方法信息创建功能信息
            </summary>
            <param name="method">方法信息</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Security.NullFunctionHandler.GetArea(System.Type)">
            <summary>
            重写以实现从类型中获取功能的区域信息
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.NullFunctionMethodInfoFinder">
            <summary>
            空的方法查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.NullFunctionMethodInfoFinder.Find(System.Type,System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            查找指定条件的方法信息
            </summary>
            <param name="type">控制器类型</param>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Security.NullFunctionMethodInfoFinder.FindAll(System.Type)">
            <summary>
            从指定类型查找方法信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Security.NullFunctionTypeFinder">
            <summary>
            空的功能信息类型查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.NullFunctionTypeFinder.Find(System.Func{System.Type,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Security.NullFunctionTypeFinder.FindAll">
            <summary>
            查找所有项
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Security.PlatformToken">
            <summary>
            技术平台标识
            </summary>
        </member>
        <member name="F:OSharp.Core.Security.PlatformToken.Mvc">
            <summary>
            标识当前平台为ASP.NET MVC
            </summary>
        </member>
        <member name="F:OSharp.Core.Security.PlatformToken.WebApi">
            <summary>
            标识当前平台为ASP.NET WebAPI
            </summary>
        </member>
        <member name="F:OSharp.Core.Security.PlatformToken.SignalR">
            <summary>
            标识当前平台为ASP.NET SignalR
            </summary>
        </member>
        <member name="F:OSharp.Core.Security.PlatformToken.Local">
            <summary>
            标识当前平台为本地程序
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.EntityInfoHandler">
            <summary>
            默认实体数据信息处理器
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.EntityInfo">
            <summary>
            实体类——实体信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.EntityInfo.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Security.EntityInfo"/>类型的新实例
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.EntityInfoBase`1">
            <summary>
            实体信息基类
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoBase`1.ClassName">
            <summary>
            获取或设置 实体类型全名
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoBase`1.Name">
            <summary>
            获取或设置 实体名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoBase`1.DataLogEnabled">
            <summary>
            获取或设置 是否启用数据日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoBase`1.PropertyNamesJson">
            <summary>
            获取或设置 实体属性信息Json字符串
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoBase`1.PropertyNames">
            <summary>
            获取 实体属性信息字典
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.EntityInfoHandlerBase`2">
            <summary>
            实体数据信息处理器
            </summary>
            <typeparam name="TEntityInfo">实体数据信息类型</typeparam>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoHandlerBase`2.Logger">
            <summary>
            获取 日志对象
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoHandlerBase`2.ServiceProvider">
            <summary>
            获取或设置 服务提供者
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoHandlerBase`2.EntityTypeFinder">
            <summary>
            获取或设置 实体类型查找器
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.EntityInfoHandlerBase`2.EntityInfos">
            <summary>
            获取 所有实体数据集合
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.EntityInfoHandlerBase`2.Initialize">
            <summary>
            从程序集中刷新实体信息，主要检索实现了<see cref="T:OSharp.Core.Data.IEntity`1"/>接口的实体类
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.EntityInfoHandlerBase`2.GetEntityInfo(System.Type)">
            <summary>
            查找指定实体类型的实体信息
            </summary>
            <param name="type">实体类型</param>
            <returns>符合条件的实体信息</returns>
        </member>
        <member name="M:OSharp.Core.Security.EntityInfoHandlerBase`2.RefreshCache">
            <summary>
            刷新实体信息缓存
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.EntityInfoHandlerBase`2.GetEntityInfos(System.Type[])">
            <summary>
            从实体类型中获取实体信息集合
            </summary>
            <param name="entityTypes">实体类型集合</param>
            <returns>实体信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Security.EntityInfoHandlerBase`2.UpdateToRepository(`0[])">
            <summary>
            更新实体信息到数据库中
            </summary>
            <param name="entityInfos">实体信息集合</param>
        </member>
        <member name="M:OSharp.Core.Security.EntityInfoHandlerBase`2.GetLastestEntityInfos">
            <summary>
            获取最新实体数据信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Security.EntityTypeFinder">
            <summary>
            实体类型查找器
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.EntityTypeFinder.AssemblyFinder">
            <summary>
            获取或设置 程序集查找器
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.EntityTypeFinder.Find(System.Func{System.Type,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Security.EntityTypeFinder.FindAll">
            <summary>
            查找所有项
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Security.Function">
            <summary>
            实体类——功能信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.Function.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Security.Function"/>类型的新实例
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.FunctionBase`1">
            <summary>
            功能信息基类
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.Name">
            <summary>
            获取 功能名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.Area">
            <summary>
            获取或设置 区域名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.Controller">
            <summary>
            获取或设置 控制器名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.Action">
            <summary>
            获取或设置 功能名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.FunctionType">
            <summary>
            获取 功能类型
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.IsTypeChanged">
            <summary>
            获取或设置 功能类型是否更改过，如为true，刷新功能时将忽略功能类型
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.OperateLogEnabled">
            <summary>
            获取 是否启用操作日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.DataLogEnabled">
            <summary>
            获取 是否启用数据日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.CacheExpirationSeconds">
            <summary>
            获取或设置 数据缓存时间（秒）
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.IsCacheSliding">
            <summary>
            获取或设置 是否相对过期时间，否则为绝对过期
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.PlatformToken">
            <summary>
            获取或设置 功能提供者，如Mvc，WebApi，SignalR等，用于功能的技术分组
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.Url">
            <summary>
            获取或设置 功能地址
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.IsController">
            <summary>
            获取或设置 是否控制器，如果为false，则此记录为action的记录
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.IsAjax">
            <summary>
            获取或设置 是否Ajax记录
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.IsChild">
            <summary>
            获取或设置 是否子功能
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.IsLocked">
            <summary>
            获取或设置 是否锁定
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.IsCustom">
            <summary>
            获取或设置 是否自定义功能
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.IsMenu">
            <summary>
            是否是菜单
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionBase`1.OrderNo">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.FunctionHandlerBase`2">
            <summary>
            功能信息处理器基类
            </summary>
            <typeparam name="TFunction">功能信息类型</typeparam>
            <typeparam name="TKey">功能信息主键类型</typeparam>
        </member>
        <member name="P:OSharp.Core.Security.FunctionHandlerBase`2.Logger">
            <summary>
            获取 日志对象
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionHandlerBase`2.ServiceProvider">
            <summary>
            获取或设置 服务提供者
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionHandlerBase`2.Functions">
            <summary>
            获取 所有功能信息集合
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionHandlerBase`2.TypeFinder">
            <summary>
            获取或设置 功能信息类型查找器
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionHandlerBase`2.MethodInfoFinder">
            <summary>
            获取或设置 功能信息方法查找器
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.FunctionHandlerBase`2.PlatformToken">
            <summary>
            获取 功能技术提供者，如Mvc/WebApi/SignalR等，用于区分功能来源，各技术更新功能时，只更新属于自己技术的功能
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.Initialize">
            <summary>
            从程序集中刷新功能数据，主要检索MVC的Controller-Action信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.GetFunction(System.String,System.String,System.String)">
            <summary>
            查找指定条件的功能信息
            </summary>
            <param name="area">区域</param>
            <param name="controller">控制器</param>
            <param name="action">功能方法</param>
            <returns>符合条件的功能信息</returns>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.GetFunction(System.String)">
            <summary>
            查找指定URL的功能信息
            </summary>
            <param name="url">URL</param>
            <returns>符合条件的功能信息</returns>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.RefreshCache">
            <summary>
            刷新功能信息缓存
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.GetFunctions(System.Type[])">
            <summary>
            从控制器类型中获取功能信息集合
            </summary>
            <param name="types">控制器类型</param>
            <returns>功能信息集合</returns>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.GetFunction(System.Type)">
            <summary>
            重写以实现从类型信息创建功能信息
            </summary>
            <param name="type">类型信息</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.GetFunction(System.Reflection.MethodInfo)">
            <summary>
            重写以实现从方法信息创建功能信息
            </summary>
            <param name="method">方法信息</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.ExistsFunction(System.Collections.Generic.IEnumerable{`0},`0)">
            <summary>
            重写以判断指定功能信息是否存在
            </summary>
            <param name="functions">功能信息集合</param>
            <param name="function">要判断的功能信息</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.GetFunction(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,System.String)">
            <summary>
            重写以实现功能信息查找
            </summary>
            <param name="functions">功能信息集合</param>
            <param name="action">方法名称</param>
            <param name="controller">类型名称</param>
            <param name="area">区域名称</param>
            <param name="name">功能名称</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.IsIgnoreMethod(System.Reflection.MethodInfo)">
            <summary>
            重写以实现是否忽略指定方法的功能信息
            </summary>
            <param name="method">方法信息</param>
            <returns></returns>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.UpdateToRepository(`0[])">
            <summary>
            更新功能信息到数据库中
            </summary>
            <param name="functions">功能信息集合</param>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.GetArea(System.Type)">
            <summary>
            重写以实现从类型中获取功能的区域信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.FunctionHandlerBase`2.GetLastestFunctions">
            <summary>
            获取最新功能信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Security.FunctionType">
            <summary>
            表示功能访问类型的枚举
            </summary>
        </member>
        <member name="F:OSharp.Core.Security.FunctionType.Anonymouse">
            <summary>
            匿名用户可访问
            </summary>
        </member>
        <member name="F:OSharp.Core.Security.FunctionType.Logined">
            <summary>
            登录用户可访问
            </summary>
        </member>
        <member name="F:OSharp.Core.Security.FunctionType.RoleLimit">
            <summary>
            指定角色可访问
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.IEntityInfo">
            <summary>
            实体数据接口
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IEntityInfo.ClassName">
            <summary>
            获取 实体数据类型名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IEntityInfo.Name">
            <summary>
            获取 实体数据显示名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IEntityInfo.DataLogEnabled">
            <summary>
            获取 是否启用数据日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IEntityInfo.PropertyNames">
            <summary>
            获取 实体属性信息字典
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.IEntityInfoHandler">
            <summary>
            实体信息处理器
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.IEntityInfoHandler.Initialize">
            <summary>
            从程序集中刷新实体信息数据
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.IEntityInfoHandler.GetEntityInfo(System.Type)">
            <summary>
            查找指定实体类型的实体信息
            </summary>
            <param name="type">实体类型</param>
            <returns>符合条件的实体信息</returns>
        </member>
        <member name="M:OSharp.Core.Security.IEntityInfoHandler.RefreshCache">
            <summary>
            刷新实体信息缓存
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.IFunction">
            <summary>
            功能接口，最小功能信息
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IFunction.Name">
            <summary>
            获取或设置 功能名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IFunction.Area">
            <summary>
            获取或设置 区域名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IFunction.Controller">
            <summary>
            获取或设置 控制器名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IFunction.Action">
            <summary>
            获取或设置 功能名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IFunction.FunctionType">
            <summary>
            获取或设置 功能类型
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IFunction.OperateLogEnabled">
            <summary>
            获取或设置 是否启用操作日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IFunction.DataLogEnabled">
            <summary>
            获取或设置 是否启用数据日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IFunction.CacheExpirationSeconds">
            <summary>
            获取或设置 数据缓存时间（秒）
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IFunction.IsCacheSliding">
            <summary>
            获取或设置 是否相对过期时间，否则为绝对过期
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IFunction.PlatformToken">
            <summary>
            获取或设置 功能提供者，如Mvc，WebApi，SignalR等，用于功能的技术分组
            </summary>
        </member>
        <member name="P:OSharp.Core.Security.IFunction.Url">
            <summary>
            获取或设置 功能地址
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.IFunctionHandler">
            <summary>
            功能信息处理器
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.IFunctionHandler.Initialize">
            <summary>
            从程序集中刷新功能数据，主要检索MVC的Controller-Action信息
            </summary>
        </member>
        <member name="M:OSharp.Core.Security.IFunctionHandler.GetFunction(System.String,System.String,System.String)">
            <summary>
            查找指定条件的功能信息
            </summary>
            <param name="area">区域</param>
            <param name="controller">控制器</param>
            <param name="action">功能方法</param>
            <returns>符合条件的功能信息</returns>
        </member>
        <member name="M:OSharp.Core.Security.IFunctionHandler.GetFunction(System.String)">
            <summary>
            查找指定URL的功能信息
            </summary>
            <param name="url">URL</param>
            <returns>符合条件的功能信息</returns>
        </member>
        <member name="M:OSharp.Core.Security.IFunctionHandler.RefreshCache">
            <summary>
            刷新功能信息缓存
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.LoginedAttribute">
            <summary>
            指定功能需要登录才能访问
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.RoleLimitAttribute">
            <summary>
            指定功能只允许特定角色可以访问
            </summary>
        </member>
        <member name="T:OSharp.Core.Security.FilterType">
            <summary>
            表示功能访问限制类型的枚举
            </summary>
        </member>
        <member name="F:OSharp.Core.Security.FilterType.Inherited">
            <summary>
            继承的，如果有父级，则与父级相同，如果没有父级，则为默认状态，不允许也不拒绝
            </summary>
        </member>
        <member name="F:OSharp.Core.Security.FilterType.Allowed">
            <summary>
            允许的，如果同时有多个访问类型，并且没有拒绝，只要有一个允许，则允许
            </summary>
        </member>
        <member name="F:OSharp.Core.Security.FilterType.Refused">
            <summary>
            拒绝的，如果同时有多个访问类型，只要有一个拒绝，则拒绝
            </summary>
        </member>
        <member name="T:OSharp.Core.Logging.DatabaseLog">
            <summary>
            数据库日志输出者
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DatabaseLog.ServiceProvider">
            <summary>
            获取或设置 服务提供者
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DatabaseLog.IsDataLogging">
            <summary>
            获取 是否数据日志对象
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DatabaseLog.IsTraceEnabled">
            <summary>
            获取 是否允许输出<see cref="!:LogLevel.Trace"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DatabaseLog.IsDebugEnabled">
            <summary>
            获取 是否允许输出<see cref="!:LogLevel.Debug"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DatabaseLog.IsInfoEnabled">
            <summary>
            获取 是否允许输出<see cref="!:LogLevel.Info"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DatabaseLog.IsWarnEnabled">
            <summary>
            获取 是否允许输出<see cref="!:LogLevel.Warn"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DatabaseLog.IsErrorEnabled">
            <summary>
            获取 是否允许输出<see cref="!:LogLevel.Error"/>级别的日志
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DatabaseLog.IsFatalEnabled">
            <summary>
            获取 是否允许输出<see cref="!:LogLevel.Fatal"/>级别的日志
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.DatabaseLog.IsLevelEnabled(OSharp.Utility.Logging.LogLevel)">
            <summary>
            是否启用日志输出级别
            </summary>
            <param name="level">日志输出</param>
            <returns>日志输出级别</returns>
        </member>
        <member name="M:OSharp.Core.Logging.DatabaseLog.Write(OSharp.Utility.Logging.LogLevel,System.Object,System.Exception,System.Boolean)">
            <summary>
            获取日志输出处理委托实例
            </summary>
            <param name="level">日志输出级别</param>
            <param name="message">日志消息</param>
            <param name="exception">日志异常</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="T:OSharp.Core.Logging.DatabaseLoggerAdapter">
            <summary>
            数据库日志适配器
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DatabaseLoggerAdapter.ServiceProvider">
            <summary>
            获取或设置 服务提供者
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.DatabaseLoggerAdapter.GetLoggerInternal(System.String)">
            <summary>
            获取指定名称的Logger实例
            </summary>
            <param name="name">指定名称</param>
            <returns>日志实例</returns>
            <exception cref="T:System.NotSupportedException">指定名称的日志缓存实例不存在则返回异常<see cref="T:System.NotSupportedException"/></exception>
        </member>
        <member name="M:OSharp.Core.Logging.DatabaseLoggerAdapter.CreateLogger(System.String)">
            <summary>
            创建指定名称的缓存实例
            </summary>
            <param name="name">指定名称</param>
            <returns></returns>
        </member>
        <member name="T:OSharp.Core.Logging.DatabaseOperateLogWriter">
            <summary>
            操作日志数据库输出实现
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.DatabaseOperateLogWriter.#ctor(OSharp.Core.Data.IRepository{OSharp.Core.Logging.OperateLog,System.Int32})">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Logging.DatabaseOperateLogWriter"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.DatabaseOperateLogWriter.Write(OSharp.Core.Logging.OperateLog)">
            <summary>
            输出操作日志
            </summary>
            <param name="operateLog">操作日志信息</param>
        </member>
        <member name="T:OSharp.Core.Logging.DataLog">
            <summary>
            数据日志信息类
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.DataLog.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Logging.DataLog"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.DataLog.#ctor(System.String,System.String,OSharp.Core.Logging.OperatingType)">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Logging.DataLog"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DataLog.EntityName">
            <summary>
            获取或设置 类型名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DataLog.Name">
            <summary>
            获取或设置 实体名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DataLog.EntityKey">
            <summary>
            获取或设置 数据编号
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DataLog.OperateType">
            <summary>
            获取或设置 操作类型
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DataLog.OperateLog">
            <summary>
            获取或设置 操作日志信息
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DataLog.LogItems">
            <summary>
            获取或设置 操作明细
            </summary>
        </member>
        <member name="T:OSharp.Core.Logging.OperatingType">
            <summary>
            实体数据日志操作类型
            </summary>
        </member>
        <member name="F:OSharp.Core.Logging.OperatingType.Query">
            <summary>
            查询
            </summary>
        </member>
        <member name="F:OSharp.Core.Logging.OperatingType.Insert">
            <summary>
            新建
            </summary>
        </member>
        <member name="F:OSharp.Core.Logging.OperatingType.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:OSharp.Core.Logging.OperatingType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="T:OSharp.Core.Logging.DataLogCache">
            <summary>
            数据日志缓存类
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.DataLogCache.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Logging.DataLogCache"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DataLogCache.DataLogs">
            <summary>
            获取 数据日志集合
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.DataLogCache.AddDataLog(OSharp.Core.Logging.DataLog)">
            <summary>
            向缓存中添加数据日志信息
            </summary>
            <param name="dataLog">数据日志信息</param>
        </member>
        <member name="T:OSharp.Core.Logging.DataLogItem">
            <summary>
            实体操作日志明细
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.DataLogItem.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Logging.DataLogItem"/>类型的新实例
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.DataLogItem.#ctor(System.String,System.String)">
             <summary>
            初始化一个<see cref="T:OSharp.Core.Logging.DataLogItem"/>类型的新实例
             </summary>
             <param name="originalValue">旧值</param>
             <param name="newValue">新值</param>
        </member>
        <member name="P:OSharp.Core.Logging.DataLogItem.Field">
            <summary>
            获取或设置 字段
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DataLogItem.FieldName">
            <summary>
            获取或设置 字段名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DataLogItem.OriginalValue">
            <summary>
            获取或设置 旧值
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DataLogItem.NewValue">
            <summary>
            获取或设置 新值
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DataLogItem.DataType">
            <summary>
            获取或设置 数据类型
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.DataLogItem.DataLog">
            <summary>
            获取或设置 所属数据日志
            </summary>
        </member>
        <member name="T:OSharp.Core.Logging.IDataLogCache">
            <summary>
            数据日志缓存接口
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.IDataLogCache.DataLogs">
            <summary>
            获取 数据日志集合
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.IDataLogCache.AddDataLog(OSharp.Core.Logging.DataLog)">
            <summary>
            向缓存中添加数据日志信息
            </summary>
            <param name="dataLog">数据日志信息</param>
        </member>
        <member name="T:OSharp.Core.Logging.IOperateLogWriter">
            <summary>
            操作日志输出接口
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.IOperateLogWriter.Write(OSharp.Core.Logging.OperateLog)">
            <summary>
            输出操作日志
            </summary>
            <param name="operateLog">操作日志信息</param>
        </member>
        <member name="T:OSharp.Core.Logging.LogInfoBase">
            <summary>
            日志信息基类
            </summary>
        </member>
        <member name="T:OSharp.Core.Logging.OperateLog">
            <summary>
            操作日志信息类
            </summary>
        </member>
        <member name="M:OSharp.Core.Logging.OperateLog.#ctor">
            <summary>
            初始化一个<see cref="T:OSharp.Core.Logging.OperateLog"/>类型的新实例
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.OperateLog.FunctionName">
            <summary>
            获取或设置 执行的功能名称
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.OperateLog.Operator">
            <summary>
            获取或设置 操作人信息
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.OperateLog.CreatedTime">
            <summary>
            获取设置 信息创建时间
            </summary>
        </member>
        <member name="P:OSharp.Core.Logging.OperateLog.DataLogs">
            <summary>
            获取或设置 数据日志集合
            </summary>
        </member>
        <member name="T:OSharp.Core.Logging.SystemLog">
            <summary>
            系统日志信息类
            </summary>
        </member>
        <member name="T:OSharp.Core.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.Caching_CacheNotInitialized">
            <summary>
              查找类似 缓存功能尚未初始化，未找到可用的 ICacheProvider 实现。 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.ConfigFile_ItemKeyDefineRepeated">
            <summary>
              查找类似 标识为“{0}”的项重复定义 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.Context_BuildServicesFirst">
            <summary>
              查找类似 请先初始化依赖注入服务，再使用OSharpContext.IocRegisterServices属性 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.DbContextInitializerConfig_InitializerNotExists">
            <summary>
              查找类似 上下文初始化类型“{0}”不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.FrameworkInitializer_DatabaseInitializeIsNull">
            <summary>
              查找类似 数据库初始化器不能为空，请确定IoC组件已加载了IDatabaseInitializer的实现类 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.FrameworkInitializer_EntityInfoHandlerIsNull">
            <summary>
              查找类似 数据处理初始化器不能为空，请确定IoC组件已加载了IEntityInfoHandler的实现类 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.FrameworkInitializer_FunctionHandlerIsNull">
            <summary>
              查找类似 数据处理初始化器不能为空，请确定IoC组件已加载了IFunctionHandler的实现类 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.Ioc_CannotResolveService">
            <summary>
              查找类似 无法解析类型“{0}”的构造函数中类型为“{1}”的参数 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.Ioc_FrameworkNotInitialized">
            <summary>
              查找类似 OSharp框架尚未初始化，请先初始化 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.Ioc_ImplementationTypeNotFound">
            <summary>
              查找类似 类型“{0}”的实现类型无法找到 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.Ioc_NoConstructorMatch">
            <summary>
              查找类似 类型“{0}”中找不到合适参数的构造函数 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.Ioc_TryAddIndistinguishableTypeToEnumerable">
            <summary>
              查找类似 实现类型不能为“{0}”，因为该类型与注册为“{1}”的其他类型无法区分 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.IocInitializerBase_TypeNotIRepositoryType">
            <summary>
              查找类似 类型“{0}”不是仓储接口“IRepository&lt;,&gt;”的派生类。 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.IocInitializerBase_TypeNotIUnitOfWorkType">
            <summary>
              查找类似 类型“{0}”不是操作单元“IUnitOfWork”的派生类。 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.Map_MapperIsNull">
            <summary>
              查找类似 MapperExtensions.Mapper不能为空，请先设置值 的本地化字符串。
            </summary>
        </member>
        <member name="P:OSharp.Core.Properties.Resources.QueryCacheExtensions_TypeNotEntityType">
            <summary>
              查找类似 类型“{0}”不是实体类型 的本地化字符串。
            </summary>
        </member>
    </members>
</doc>
